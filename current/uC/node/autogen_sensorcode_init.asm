; ************************************************ 
; **         THIS FILE IS AUTOGENERATED!        ** 
; ** YOU PROBABLY REALLY DON'T WANT TO EDIT IT! ** 
; ************************************************ 
; Source: template_autogen_sensorcode_init.asm
	#include "sensorcfg.h"
	#include "main.h"
	#include "protocol.h"
	#include "memoryplacement.h"

	errorlevel  -302  

	CODE

; TRISTATES
autogen_sensors_init:
	global autogen_sensors_init

    bsf STATUS, RP0 ; bank 1
    bcf STATUS, RP1 ; bank 1

; SENSOR_1
#ifdef SENSOR_1_PRESENT
	#if (SENSOR_ID_GENERIC_DIGITAL_IN == SENSOR_1_TYPE)
		bsf SENSOR_1_TRIS, SENSOR_1_PIN	
	#endif
	#if (SENSOR_ID_GENERIC_DIGITAL_OUT == SENSOR_1_TYPE)
		bcf SENSOR_1_TRIS, SENSOR_1_PIN	
	#endif
	#if (SENSOR_ID_PWM_LED == SENSOR_1_TYPE)
		bcf SENSOR_1_TRIS, SENSOR_1_PIN	

		; Stay in bank 1
		movlw 0x80
		movwf SENSOR_1_PWM_VOLUME
		movlw 0x80
		movwf SENSOR_1_PWM_TARGET
		movlw 0x01
		movwf SENSOR_1_PWM_SPEED

		clrf SENSOR_1_ROLLING_TIMER_LOW
	#endif

	#if (SENSOR_ID_TRIAC == SENSOR_1_TYPE)
		bcf SENSOR_1_TRIS, SENSOR_1_PIN	
		; Set tristate for zero-crossing port, too
		bsf SENSOR_1_ZC_PORT, SENSOR_1_ZC_PIN	

		movlw 0x20
		movwf SENSOR_1_PWM_VOLUME
		clrf SENSOR_1_ROLLING_TIMER_LOW
	#endif
#endif
; SENSOR_2
#ifdef SENSOR_2_PRESENT
	#if (SENSOR_ID_GENERIC_DIGITAL_IN == SENSOR_2_TYPE)
		bsf SENSOR_2_TRIS, SENSOR_2_PIN	
	#endif
	#if (SENSOR_ID_GENERIC_DIGITAL_OUT == SENSOR_2_TYPE)
		bcf SENSOR_2_TRIS, SENSOR_2_PIN	
	#endif
	#if (SENSOR_ID_PWM_LED == SENSOR_2_TYPE)
		bcf SENSOR_2_TRIS, SENSOR_2_PIN	

		; Stay in bank 1
		movlw 0x80
		movwf SENSOR_2_PWM_VOLUME
		movlw 0x80
		movwf SENSOR_2_PWM_TARGET
		movlw 0x01
		movwf SENSOR_2_PWM_SPEED

		clrf SENSOR_2_ROLLING_TIMER_LOW
	#endif

	#if (SENSOR_ID_TRIAC == SENSOR_2_TYPE)
		bcf SENSOR_2_TRIS, SENSOR_2_PIN	
		; Set tristate for zero-crossing port, too
		bsf SENSOR_2_ZC_PORT, SENSOR_2_ZC_PIN	

		movlw 0x20
		movwf SENSOR_2_PWM_VOLUME
		clrf SENSOR_2_ROLLING_TIMER_LOW
	#endif
#endif
; SENSOR_3
#ifdef SENSOR_3_PRESENT
	#if (SENSOR_ID_GENERIC_DIGITAL_IN == SENSOR_3_TYPE)
		bsf SENSOR_3_TRIS, SENSOR_3_PIN	
	#endif
	#if (SENSOR_ID_GENERIC_DIGITAL_OUT == SENSOR_3_TYPE)
		bcf SENSOR_3_TRIS, SENSOR_3_PIN	
	#endif
	#if (SENSOR_ID_PWM_LED == SENSOR_3_TYPE)
		bcf SENSOR_3_TRIS, SENSOR_3_PIN	

		; Stay in bank 1
		movlw 0x80
		movwf SENSOR_3_PWM_VOLUME
		movlw 0x80
		movwf SENSOR_3_PWM_TARGET
		movlw 0x01
		movwf SENSOR_3_PWM_SPEED

		clrf SENSOR_3_ROLLING_TIMER_LOW
	#endif

	#if (SENSOR_ID_TRIAC == SENSOR_3_TYPE)
		bcf SENSOR_3_TRIS, SENSOR_3_PIN	
		; Set tristate for zero-crossing port, too
		bsf SENSOR_3_ZC_PORT, SENSOR_3_ZC_PIN	

		movlw 0x20
		movwf SENSOR_3_PWM_VOLUME
		clrf SENSOR_3_ROLLING_TIMER_LOW
	#endif
#endif
; SENSOR_4
#ifdef SENSOR_4_PRESENT
	#if (SENSOR_ID_GENERIC_DIGITAL_IN == SENSOR_4_TYPE)
		bsf SENSOR_4_TRIS, SENSOR_4_PIN	
	#endif
	#if (SENSOR_ID_GENERIC_DIGITAL_OUT == SENSOR_4_TYPE)
		bcf SENSOR_4_TRIS, SENSOR_4_PIN	
	#endif
	#if (SENSOR_ID_PWM_LED == SENSOR_4_TYPE)
		bcf SENSOR_4_TRIS, SENSOR_4_PIN	

		; Stay in bank 1
		movlw 0x80
		movwf SENSOR_4_PWM_VOLUME
		movlw 0x80
		movwf SENSOR_4_PWM_TARGET
		movlw 0x01
		movwf SENSOR_4_PWM_SPEED

		clrf SENSOR_4_ROLLING_TIMER_LOW
	#endif

	#if (SENSOR_ID_TRIAC == SENSOR_4_TYPE)
		bcf SENSOR_4_TRIS, SENSOR_4_PIN	
		; Set tristate for zero-crossing port, too
		bsf SENSOR_4_ZC_PORT, SENSOR_4_ZC_PIN	

		movlw 0x20
		movwf SENSOR_4_PWM_VOLUME
		clrf SENSOR_4_ROLLING_TIMER_LOW
	#endif
#endif
; SENSOR_5
#ifdef SENSOR_5_PRESENT
	#if (SENSOR_ID_GENERIC_DIGITAL_IN == SENSOR_5_TYPE)
		bsf SENSOR_5_TRIS, SENSOR_5_PIN	
	#endif
	#if (SENSOR_ID_GENERIC_DIGITAL_OUT == SENSOR_5_TYPE)
		bcf SENSOR_5_TRIS, SENSOR_5_PIN	
	#endif
	#if (SENSOR_ID_PWM_LED == SENSOR_5_TYPE)
		bcf SENSOR_5_TRIS, SENSOR_5_PIN	

		; Stay in bank 1
		movlw 0x80
		movwf SENSOR_5_PWM_VOLUME
		movlw 0x80
		movwf SENSOR_5_PWM_TARGET
		movlw 0x01
		movwf SENSOR_5_PWM_SPEED

		clrf SENSOR_5_ROLLING_TIMER_LOW
	#endif

	#if (SENSOR_ID_TRIAC == SENSOR_5_TYPE)
		bcf SENSOR_5_TRIS, SENSOR_5_PIN	
		; Set tristate for zero-crossing port, too
		bsf SENSOR_5_ZC_PORT, SENSOR_5_ZC_PIN	

		movlw 0x20
		movwf SENSOR_5_PWM_VOLUME
		clrf SENSOR_5_ROLLING_TIMER_LOW
	#endif
#endif
; SENSOR_6
#ifdef SENSOR_6_PRESENT
	#if (SENSOR_ID_GENERIC_DIGITAL_IN == SENSOR_6_TYPE)
		bsf SENSOR_6_TRIS, SENSOR_6_PIN	
	#endif
	#if (SENSOR_ID_GENERIC_DIGITAL_OUT == SENSOR_6_TYPE)
		bcf SENSOR_6_TRIS, SENSOR_6_PIN	
	#endif
	#if (SENSOR_ID_PWM_LED == SENSOR_6_TYPE)
		bcf SENSOR_6_TRIS, SENSOR_6_PIN	

		; Stay in bank 1
		movlw 0x80
		movwf SENSOR_6_PWM_VOLUME
		movlw 0x80
		movwf SENSOR_6_PWM_TARGET
		movlw 0x01
		movwf SENSOR_6_PWM_SPEED

		clrf SENSOR_6_ROLLING_TIMER_LOW
	#endif

	#if (SENSOR_ID_TRIAC == SENSOR_6_TYPE)
		bcf SENSOR_6_TRIS, SENSOR_6_PIN	
		; Set tristate for zero-crossing port, too
		bsf SENSOR_6_ZC_PORT, SENSOR_6_ZC_PIN	

		movlw 0x20
		movwf SENSOR_6_PWM_VOLUME
		clrf SENSOR_6_ROLLING_TIMER_LOW
	#endif
#endif
; SENSOR_7
#ifdef SENSOR_7_PRESENT
	#if (SENSOR_ID_GENERIC_DIGITAL_IN == SENSOR_7_TYPE)
		bsf SENSOR_7_TRIS, SENSOR_7_PIN	
	#endif
	#if (SENSOR_ID_GENERIC_DIGITAL_OUT == SENSOR_7_TYPE)
		bcf SENSOR_7_TRIS, SENSOR_7_PIN	
	#endif
	#if (SENSOR_ID_PWM_LED == SENSOR_7_TYPE)
		bcf SENSOR_7_TRIS, SENSOR_7_PIN	

		; Stay in bank 1
		movlw 0x80
		movwf SENSOR_7_PWM_VOLUME
		movlw 0x80
		movwf SENSOR_7_PWM_TARGET
		movlw 0x01
		movwf SENSOR_7_PWM_SPEED

		clrf SENSOR_7_ROLLING_TIMER_LOW
	#endif

	#if (SENSOR_ID_TRIAC == SENSOR_7_TYPE)
		bcf SENSOR_7_TRIS, SENSOR_7_PIN	
		; Set tristate for zero-crossing port, too
		bsf SENSOR_7_ZC_PORT, SENSOR_7_ZC_PIN	

		movlw 0x20
		movwf SENSOR_7_PWM_VOLUME
		clrf SENSOR_7_ROLLING_TIMER_LOW
	#endif
#endif
; SENSOR_8
#ifdef SENSOR_8_PRESENT
	#if (SENSOR_ID_GENERIC_DIGITAL_IN == SENSOR_8_TYPE)
		bsf SENSOR_8_TRIS, SENSOR_8_PIN	
	#endif
	#if (SENSOR_ID_GENERIC_DIGITAL_OUT == SENSOR_8_TYPE)
		bcf SENSOR_8_TRIS, SENSOR_8_PIN	
	#endif
	#if (SENSOR_ID_PWM_LED == SENSOR_8_TYPE)
		bcf SENSOR_8_TRIS, SENSOR_8_PIN	

		; Stay in bank 1
		movlw 0x80
		movwf SENSOR_8_PWM_VOLUME
		movlw 0x80
		movwf SENSOR_8_PWM_TARGET
		movlw 0x01
		movwf SENSOR_8_PWM_SPEED

		clrf SENSOR_8_ROLLING_TIMER_LOW
	#endif

	#if (SENSOR_ID_TRIAC == SENSOR_8_TYPE)
		bcf SENSOR_8_TRIS, SENSOR_8_PIN	
		; Set tristate for zero-crossing port, too
		bsf SENSOR_8_ZC_PORT, SENSOR_8_ZC_PIN	

		movlw 0x20
		movwf SENSOR_8_PWM_VOLUME
		clrf SENSOR_8_ROLLING_TIMER_LOW
	#endif
#endif
; SENSOR_9
#ifdef SENSOR_9_PRESENT
	#if (SENSOR_ID_GENERIC_DIGITAL_IN == SENSOR_9_TYPE)
		bsf SENSOR_9_TRIS, SENSOR_9_PIN	
	#endif
	#if (SENSOR_ID_GENERIC_DIGITAL_OUT == SENSOR_9_TYPE)
		bcf SENSOR_9_TRIS, SENSOR_9_PIN	
	#endif
	#if (SENSOR_ID_PWM_LED == SENSOR_9_TYPE)
		bcf SENSOR_9_TRIS, SENSOR_9_PIN	

		; Stay in bank 1
		movlw 0x80
		movwf SENSOR_9_PWM_VOLUME
		movlw 0x80
		movwf SENSOR_9_PWM_TARGET
		movlw 0x01
		movwf SENSOR_9_PWM_SPEED

		clrf SENSOR_9_ROLLING_TIMER_LOW
	#endif

	#if (SENSOR_ID_TRIAC == SENSOR_9_TYPE)
		bcf SENSOR_9_TRIS, SENSOR_9_PIN	
		; Set tristate for zero-crossing port, too
		bsf SENSOR_9_ZC_PORT, SENSOR_9_ZC_PIN	

		movlw 0x20
		movwf SENSOR_9_PWM_VOLUME
		clrf SENSOR_9_ROLLING_TIMER_LOW
	#endif
#endif
; SENSOR_10
#ifdef SENSOR_10_PRESENT
	#if (SENSOR_ID_GENERIC_DIGITAL_IN == SENSOR_10_TYPE)
		bsf SENSOR_10_TRIS, SENSOR_10_PIN	
	#endif
	#if (SENSOR_ID_GENERIC_DIGITAL_OUT == SENSOR_10_TYPE)
		bcf SENSOR_10_TRIS, SENSOR_10_PIN	
	#endif
	#if (SENSOR_ID_PWM_LED == SENSOR_10_TYPE)
		bcf SENSOR_10_TRIS, SENSOR_10_PIN	

		; Stay in bank 1
		movlw 0x80
		movwf SENSOR_10_PWM_VOLUME
		movlw 0x80
		movwf SENSOR_10_PWM_TARGET
		movlw 0x01
		movwf SENSOR_10_PWM_SPEED

		clrf SENSOR_10_ROLLING_TIMER_LOW
	#endif

	#if (SENSOR_ID_TRIAC == SENSOR_10_TYPE)
		bcf SENSOR_10_TRIS, SENSOR_10_PIN	
		; Set tristate for zero-crossing port, too
		bsf SENSOR_10_ZC_PORT, SENSOR_10_ZC_PIN	

		movlw 0x20
		movwf SENSOR_10_PWM_VOLUME
		clrf SENSOR_10_ROLLING_TIMER_LOW
	#endif
#endif
; SENSOR_11
#ifdef SENSOR_11_PRESENT
	#if (SENSOR_ID_GENERIC_DIGITAL_IN == SENSOR_11_TYPE)
		bsf SENSOR_11_TRIS, SENSOR_11_PIN	
	#endif
	#if (SENSOR_ID_GENERIC_DIGITAL_OUT == SENSOR_11_TYPE)
		bcf SENSOR_11_TRIS, SENSOR_11_PIN	
	#endif
	#if (SENSOR_ID_PWM_LED == SENSOR_11_TYPE)
		bcf SENSOR_11_TRIS, SENSOR_11_PIN	

		; Stay in bank 1
		movlw 0x80
		movwf SENSOR_11_PWM_VOLUME
		movlw 0x80
		movwf SENSOR_11_PWM_TARGET
		movlw 0x01
		movwf SENSOR_11_PWM_SPEED

		clrf SENSOR_11_ROLLING_TIMER_LOW
	#endif

	#if (SENSOR_ID_TRIAC == SENSOR_11_TYPE)
		bcf SENSOR_11_TRIS, SENSOR_11_PIN	
		; Set tristate for zero-crossing port, too
		bsf SENSOR_11_ZC_PORT, SENSOR_11_ZC_PIN	

		movlw 0x20
		movwf SENSOR_11_PWM_VOLUME
		clrf SENSOR_11_ROLLING_TIMER_LOW
	#endif
#endif
; SENSOR_12
#ifdef SENSOR_12_PRESENT
	#if (SENSOR_ID_GENERIC_DIGITAL_IN == SENSOR_12_TYPE)
		bsf SENSOR_12_TRIS, SENSOR_12_PIN	
	#endif
	#if (SENSOR_ID_GENERIC_DIGITAL_OUT == SENSOR_12_TYPE)
		bcf SENSOR_12_TRIS, SENSOR_12_PIN	
	#endif
	#if (SENSOR_ID_PWM_LED == SENSOR_12_TYPE)
		bcf SENSOR_12_TRIS, SENSOR_12_PIN	

		; Stay in bank 1
		movlw 0x80
		movwf SENSOR_12_PWM_VOLUME
		movlw 0x80
		movwf SENSOR_12_PWM_TARGET
		movlw 0x01
		movwf SENSOR_12_PWM_SPEED

		clrf SENSOR_12_ROLLING_TIMER_LOW
	#endif

	#if (SENSOR_ID_TRIAC == SENSOR_12_TYPE)
		bcf SENSOR_12_TRIS, SENSOR_12_PIN	
		; Set tristate for zero-crossing port, too
		bsf SENSOR_12_ZC_PORT, SENSOR_12_ZC_PIN	

		movlw 0x20
		movwf SENSOR_12_PWM_VOLUME
		clrf SENSOR_12_ROLLING_TIMER_LOW
	#endif
#endif
; SENSOR_13
#ifdef SENSOR_13_PRESENT
	#if (SENSOR_ID_GENERIC_DIGITAL_IN == SENSOR_13_TYPE)
		bsf SENSOR_13_TRIS, SENSOR_13_PIN	
	#endif
	#if (SENSOR_ID_GENERIC_DIGITAL_OUT == SENSOR_13_TYPE)
		bcf SENSOR_13_TRIS, SENSOR_13_PIN	
	#endif
	#if (SENSOR_ID_PWM_LED == SENSOR_13_TYPE)
		bcf SENSOR_13_TRIS, SENSOR_13_PIN	

		; Stay in bank 1
		movlw 0x80
		movwf SENSOR_13_PWM_VOLUME
		movlw 0x80
		movwf SENSOR_13_PWM_TARGET
		movlw 0x01
		movwf SENSOR_13_PWM_SPEED

		clrf SENSOR_13_ROLLING_TIMER_LOW
	#endif

	#if (SENSOR_ID_TRIAC == SENSOR_13_TYPE)
		bcf SENSOR_13_TRIS, SENSOR_13_PIN	
		; Set tristate for zero-crossing port, too
		bsf SENSOR_13_ZC_PORT, SENSOR_13_ZC_PIN	

		movlw 0x20
		movwf SENSOR_13_PWM_VOLUME
		clrf SENSOR_13_ROLLING_TIMER_LOW
	#endif
#endif
; SENSOR_14
#ifdef SENSOR_14_PRESENT
	#if (SENSOR_ID_GENERIC_DIGITAL_IN == SENSOR_14_TYPE)
		bsf SENSOR_14_TRIS, SENSOR_14_PIN	
	#endif
	#if (SENSOR_ID_GENERIC_DIGITAL_OUT == SENSOR_14_TYPE)
		bcf SENSOR_14_TRIS, SENSOR_14_PIN	
	#endif
	#if (SENSOR_ID_PWM_LED == SENSOR_14_TYPE)
		bcf SENSOR_14_TRIS, SENSOR_14_PIN	

		; Stay in bank 1
		movlw 0x80
		movwf SENSOR_14_PWM_VOLUME
		movlw 0x80
		movwf SENSOR_14_PWM_TARGET
		movlw 0x01
		movwf SENSOR_14_PWM_SPEED

		clrf SENSOR_14_ROLLING_TIMER_LOW
	#endif

	#if (SENSOR_ID_TRIAC == SENSOR_14_TYPE)
		bcf SENSOR_14_TRIS, SENSOR_14_PIN	
		; Set tristate for zero-crossing port, too
		bsf SENSOR_14_ZC_PORT, SENSOR_14_ZC_PIN	

		movlw 0x20
		movwf SENSOR_14_PWM_VOLUME
		clrf SENSOR_14_ROLLING_TIMER_LOW
	#endif
#endif
; SENSOR_15
#ifdef SENSOR_15_PRESENT
	#if (SENSOR_ID_GENERIC_DIGITAL_IN == SENSOR_15_TYPE)
		bsf SENSOR_15_TRIS, SENSOR_15_PIN	
	#endif
	#if (SENSOR_ID_GENERIC_DIGITAL_OUT == SENSOR_15_TYPE)
		bcf SENSOR_15_TRIS, SENSOR_15_PIN	
	#endif
	#if (SENSOR_ID_PWM_LED == SENSOR_15_TYPE)
		bcf SENSOR_15_TRIS, SENSOR_15_PIN	

		; Stay in bank 1
		movlw 0x80
		movwf SENSOR_15_PWM_VOLUME
		movlw 0x80
		movwf SENSOR_15_PWM_TARGET
		movlw 0x01
		movwf SENSOR_15_PWM_SPEED

		clrf SENSOR_15_ROLLING_TIMER_LOW
	#endif

	#if (SENSOR_ID_TRIAC == SENSOR_15_TYPE)
		bcf SENSOR_15_TRIS, SENSOR_15_PIN	
		; Set tristate for zero-crossing port, too
		bsf SENSOR_15_ZC_PORT, SENSOR_15_ZC_PIN	

		movlw 0x20
		movwf SENSOR_15_PWM_VOLUME
		clrf SENSOR_15_ROLLING_TIMER_LOW
	#endif
#endif
; SENSOR_16
#ifdef SENSOR_16_PRESENT
	#if (SENSOR_ID_GENERIC_DIGITAL_IN == SENSOR_16_TYPE)
		bsf SENSOR_16_TRIS, SENSOR_16_PIN	
	#endif
	#if (SENSOR_ID_GENERIC_DIGITAL_OUT == SENSOR_16_TYPE)
		bcf SENSOR_16_TRIS, SENSOR_16_PIN	
	#endif
	#if (SENSOR_ID_PWM_LED == SENSOR_16_TYPE)
		bcf SENSOR_16_TRIS, SENSOR_16_PIN	

		; Stay in bank 1
		movlw 0x80
		movwf SENSOR_16_PWM_VOLUME
		movlw 0x80
		movwf SENSOR_16_PWM_TARGET
		movlw 0x01
		movwf SENSOR_16_PWM_SPEED

		clrf SENSOR_16_ROLLING_TIMER_LOW
	#endif

	#if (SENSOR_ID_TRIAC == SENSOR_16_TYPE)
		bcf SENSOR_16_TRIS, SENSOR_16_PIN	
		; Set tristate for zero-crossing port, too
		bsf SENSOR_16_ZC_PORT, SENSOR_16_ZC_PIN	

		movlw 0x20
		movwf SENSOR_16_PWM_VOLUME
		clrf SENSOR_16_ROLLING_TIMER_LOW
	#endif
#endif
; SENSOR_17
#ifdef SENSOR_17_PRESENT
	#if (SENSOR_ID_GENERIC_DIGITAL_IN == SENSOR_17_TYPE)
		bsf SENSOR_17_TRIS, SENSOR_17_PIN	
	#endif
	#if (SENSOR_ID_GENERIC_DIGITAL_OUT == SENSOR_17_TYPE)
		bcf SENSOR_17_TRIS, SENSOR_17_PIN	
	#endif
	#if (SENSOR_ID_PWM_LED == SENSOR_17_TYPE)
		bcf SENSOR_17_TRIS, SENSOR_17_PIN	

		; Stay in bank 1
		movlw 0x80
		movwf SENSOR_17_PWM_VOLUME
		movlw 0x80
		movwf SENSOR_17_PWM_TARGET
		movlw 0x01
		movwf SENSOR_17_PWM_SPEED

		clrf SENSOR_17_ROLLING_TIMER_LOW
	#endif

	#if (SENSOR_ID_TRIAC == SENSOR_17_TYPE)
		bcf SENSOR_17_TRIS, SENSOR_17_PIN	
		; Set tristate for zero-crossing port, too
		bsf SENSOR_17_ZC_PORT, SENSOR_17_ZC_PIN	

		movlw 0x20
		movwf SENSOR_17_PWM_VOLUME
		clrf SENSOR_17_ROLLING_TIMER_LOW
	#endif
#endif
; SENSOR_18
#ifdef SENSOR_18_PRESENT
	#if (SENSOR_ID_GENERIC_DIGITAL_IN == SENSOR_18_TYPE)
		bsf SENSOR_18_TRIS, SENSOR_18_PIN	
	#endif
	#if (SENSOR_ID_GENERIC_DIGITAL_OUT == SENSOR_18_TYPE)
		bcf SENSOR_18_TRIS, SENSOR_18_PIN	
	#endif
	#if (SENSOR_ID_PWM_LED == SENSOR_18_TYPE)
		bcf SENSOR_18_TRIS, SENSOR_18_PIN	

		; Stay in bank 1
		movlw 0x80
		movwf SENSOR_18_PWM_VOLUME
		movlw 0x80
		movwf SENSOR_18_PWM_TARGET
		movlw 0x01
		movwf SENSOR_18_PWM_SPEED

		clrf SENSOR_18_ROLLING_TIMER_LOW
	#endif

	#if (SENSOR_ID_TRIAC == SENSOR_18_TYPE)
		bcf SENSOR_18_TRIS, SENSOR_18_PIN	
		; Set tristate for zero-crossing port, too
		bsf SENSOR_18_ZC_PORT, SENSOR_18_ZC_PIN	

		movlw 0x20
		movwf SENSOR_18_PWM_VOLUME
		clrf SENSOR_18_ROLLING_TIMER_LOW
	#endif
#endif
; SENSOR_19
#ifdef SENSOR_19_PRESENT
	#if (SENSOR_ID_GENERIC_DIGITAL_IN == SENSOR_19_TYPE)
		bsf SENSOR_19_TRIS, SENSOR_19_PIN	
	#endif
	#if (SENSOR_ID_GENERIC_DIGITAL_OUT == SENSOR_19_TYPE)
		bcf SENSOR_19_TRIS, SENSOR_19_PIN	
	#endif
	#if (SENSOR_ID_PWM_LED == SENSOR_19_TYPE)
		bcf SENSOR_19_TRIS, SENSOR_19_PIN	

		; Stay in bank 1
		movlw 0x80
		movwf SENSOR_19_PWM_VOLUME
		movlw 0x80
		movwf SENSOR_19_PWM_TARGET
		movlw 0x01
		movwf SENSOR_19_PWM_SPEED

		clrf SENSOR_19_ROLLING_TIMER_LOW
	#endif

	#if (SENSOR_ID_TRIAC == SENSOR_19_TYPE)
		bcf SENSOR_19_TRIS, SENSOR_19_PIN	
		; Set tristate for zero-crossing port, too
		bsf SENSOR_19_ZC_PORT, SENSOR_19_ZC_PIN	

		movlw 0x20
		movwf SENSOR_19_PWM_VOLUME
		clrf SENSOR_19_ROLLING_TIMER_LOW
	#endif
#endif
; SENSOR_20
#ifdef SENSOR_20_PRESENT
	#if (SENSOR_ID_GENERIC_DIGITAL_IN == SENSOR_20_TYPE)
		bsf SENSOR_20_TRIS, SENSOR_20_PIN	
	#endif
	#if (SENSOR_ID_GENERIC_DIGITAL_OUT == SENSOR_20_TYPE)
		bcf SENSOR_20_TRIS, SENSOR_20_PIN	
	#endif
	#if (SENSOR_ID_PWM_LED == SENSOR_20_TYPE)
		bcf SENSOR_20_TRIS, SENSOR_20_PIN	

		; Stay in bank 1
		movlw 0x80
		movwf SENSOR_20_PWM_VOLUME
		movlw 0x80
		movwf SENSOR_20_PWM_TARGET
		movlw 0x01
		movwf SENSOR_20_PWM_SPEED

		clrf SENSOR_20_ROLLING_TIMER_LOW
	#endif

	#if (SENSOR_ID_TRIAC == SENSOR_20_TYPE)
		bcf SENSOR_20_TRIS, SENSOR_20_PIN	
		; Set tristate for zero-crossing port, too
		bsf SENSOR_20_ZC_PORT, SENSOR_20_ZC_PIN	

		movlw 0x20
		movwf SENSOR_20_PWM_VOLUME
		clrf SENSOR_20_ROLLING_TIMER_LOW
	#endif
#endif
; SENSOR_21
#ifdef SENSOR_21_PRESENT
	#if (SENSOR_ID_GENERIC_DIGITAL_IN == SENSOR_21_TYPE)
		bsf SENSOR_21_TRIS, SENSOR_21_PIN	
	#endif
	#if (SENSOR_ID_GENERIC_DIGITAL_OUT == SENSOR_21_TYPE)
		bcf SENSOR_21_TRIS, SENSOR_21_PIN	
	#endif
	#if (SENSOR_ID_PWM_LED == SENSOR_21_TYPE)
		bcf SENSOR_21_TRIS, SENSOR_21_PIN	

		; Stay in bank 1
		movlw 0x80
		movwf SENSOR_21_PWM_VOLUME
		movlw 0x80
		movwf SENSOR_21_PWM_TARGET
		movlw 0x01
		movwf SENSOR_21_PWM_SPEED

		clrf SENSOR_21_ROLLING_TIMER_LOW
	#endif

	#if (SENSOR_ID_TRIAC == SENSOR_21_TYPE)
		bcf SENSOR_21_TRIS, SENSOR_21_PIN	
		; Set tristate for zero-crossing port, too
		bsf SENSOR_21_ZC_PORT, SENSOR_21_ZC_PIN	

		movlw 0x20
		movwf SENSOR_21_PWM_VOLUME
		clrf SENSOR_21_ROLLING_TIMER_LOW
	#endif
#endif
; SENSOR_22
#ifdef SENSOR_22_PRESENT
	#if (SENSOR_ID_GENERIC_DIGITAL_IN == SENSOR_22_TYPE)
		bsf SENSOR_22_TRIS, SENSOR_22_PIN	
	#endif
	#if (SENSOR_ID_GENERIC_DIGITAL_OUT == SENSOR_22_TYPE)
		bcf SENSOR_22_TRIS, SENSOR_22_PIN	
	#endif
	#if (SENSOR_ID_PWM_LED == SENSOR_22_TYPE)
		bcf SENSOR_22_TRIS, SENSOR_22_PIN	

		; Stay in bank 1
		movlw 0x80
		movwf SENSOR_22_PWM_VOLUME
		movlw 0x80
		movwf SENSOR_22_PWM_TARGET
		movlw 0x01
		movwf SENSOR_22_PWM_SPEED

		clrf SENSOR_22_ROLLING_TIMER_LOW
	#endif

	#if (SENSOR_ID_TRIAC == SENSOR_22_TYPE)
		bcf SENSOR_22_TRIS, SENSOR_22_PIN	
		; Set tristate for zero-crossing port, too
		bsf SENSOR_22_ZC_PORT, SENSOR_22_ZC_PIN	

		movlw 0x20
		movwf SENSOR_22_PWM_VOLUME
		clrf SENSOR_22_ROLLING_TIMER_LOW
	#endif
#endif
; SENSOR_23
#ifdef SENSOR_23_PRESENT
	#if (SENSOR_ID_GENERIC_DIGITAL_IN == SENSOR_23_TYPE)
		bsf SENSOR_23_TRIS, SENSOR_23_PIN	
	#endif
	#if (SENSOR_ID_GENERIC_DIGITAL_OUT == SENSOR_23_TYPE)
		bcf SENSOR_23_TRIS, SENSOR_23_PIN	
	#endif
	#if (SENSOR_ID_PWM_LED == SENSOR_23_TYPE)
		bcf SENSOR_23_TRIS, SENSOR_23_PIN	

		; Stay in bank 1
		movlw 0x80
		movwf SENSOR_23_PWM_VOLUME
		movlw 0x80
		movwf SENSOR_23_PWM_TARGET
		movlw 0x01
		movwf SENSOR_23_PWM_SPEED

		clrf SENSOR_23_ROLLING_TIMER_LOW
	#endif

	#if (SENSOR_ID_TRIAC == SENSOR_23_TYPE)
		bcf SENSOR_23_TRIS, SENSOR_23_PIN	
		; Set tristate for zero-crossing port, too
		bsf SENSOR_23_ZC_PORT, SENSOR_23_ZC_PIN	

		movlw 0x20
		movwf SENSOR_23_PWM_VOLUME
		clrf SENSOR_23_ROLLING_TIMER_LOW
	#endif
#endif
; SENSOR_24
#ifdef SENSOR_24_PRESENT
	#if (SENSOR_ID_GENERIC_DIGITAL_IN == SENSOR_24_TYPE)
		bsf SENSOR_24_TRIS, SENSOR_24_PIN	
	#endif
	#if (SENSOR_ID_GENERIC_DIGITAL_OUT == SENSOR_24_TYPE)
		bcf SENSOR_24_TRIS, SENSOR_24_PIN	
	#endif
	#if (SENSOR_ID_PWM_LED == SENSOR_24_TYPE)
		bcf SENSOR_24_TRIS, SENSOR_24_PIN	

		; Stay in bank 1
		movlw 0x80
		movwf SENSOR_24_PWM_VOLUME
		movlw 0x80
		movwf SENSOR_24_PWM_TARGET
		movlw 0x01
		movwf SENSOR_24_PWM_SPEED

		clrf SENSOR_24_ROLLING_TIMER_LOW
	#endif

	#if (SENSOR_ID_TRIAC == SENSOR_24_TYPE)
		bcf SENSOR_24_TRIS, SENSOR_24_PIN	
		; Set tristate for zero-crossing port, too
		bsf SENSOR_24_ZC_PORT, SENSOR_24_ZC_PIN	

		movlw 0x20
		movwf SENSOR_24_PWM_VOLUME
		clrf SENSOR_24_ROLLING_TIMER_LOW
	#endif
#endif
; SENSOR_25
#ifdef SENSOR_25_PRESENT
	#if (SENSOR_ID_GENERIC_DIGITAL_IN == SENSOR_25_TYPE)
		bsf SENSOR_25_TRIS, SENSOR_25_PIN	
	#endif
	#if (SENSOR_ID_GENERIC_DIGITAL_OUT == SENSOR_25_TYPE)
		bcf SENSOR_25_TRIS, SENSOR_25_PIN	
	#endif
	#if (SENSOR_ID_PWM_LED == SENSOR_25_TYPE)
		bcf SENSOR_25_TRIS, SENSOR_25_PIN	

		; Stay in bank 1
		movlw 0x80
		movwf SENSOR_25_PWM_VOLUME
		movlw 0x80
		movwf SENSOR_25_PWM_TARGET
		movlw 0x01
		movwf SENSOR_25_PWM_SPEED

		clrf SENSOR_25_ROLLING_TIMER_LOW
	#endif

	#if (SENSOR_ID_TRIAC == SENSOR_25_TYPE)
		bcf SENSOR_25_TRIS, SENSOR_25_PIN	
		; Set tristate for zero-crossing port, too
		bsf SENSOR_25_ZC_PORT, SENSOR_25_ZC_PIN	

		movlw 0x20
		movwf SENSOR_25_PWM_VOLUME
		clrf SENSOR_25_ROLLING_TIMER_LOW
	#endif
#endif
; SENSOR_26
#ifdef SENSOR_26_PRESENT
	#if (SENSOR_ID_GENERIC_DIGITAL_IN == SENSOR_26_TYPE)
		bsf SENSOR_26_TRIS, SENSOR_26_PIN	
	#endif
	#if (SENSOR_ID_GENERIC_DIGITAL_OUT == SENSOR_26_TYPE)
		bcf SENSOR_26_TRIS, SENSOR_26_PIN	
	#endif
	#if (SENSOR_ID_PWM_LED == SENSOR_26_TYPE)
		bcf SENSOR_26_TRIS, SENSOR_26_PIN	

		; Stay in bank 1
		movlw 0x80
		movwf SENSOR_26_PWM_VOLUME
		movlw 0x80
		movwf SENSOR_26_PWM_TARGET
		movlw 0x01
		movwf SENSOR_26_PWM_SPEED

		clrf SENSOR_26_ROLLING_TIMER_LOW
	#endif

	#if (SENSOR_ID_TRIAC == SENSOR_26_TYPE)
		bcf SENSOR_26_TRIS, SENSOR_26_PIN	
		; Set tristate for zero-crossing port, too
		bsf SENSOR_26_ZC_PORT, SENSOR_26_ZC_PIN	

		movlw 0x20
		movwf SENSOR_26_PWM_VOLUME
		clrf SENSOR_26_ROLLING_TIMER_LOW
	#endif
#endif
; SENSOR_27
#ifdef SENSOR_27_PRESENT
	#if (SENSOR_ID_GENERIC_DIGITAL_IN == SENSOR_27_TYPE)
		bsf SENSOR_27_TRIS, SENSOR_27_PIN	
	#endif
	#if (SENSOR_ID_GENERIC_DIGITAL_OUT == SENSOR_27_TYPE)
		bcf SENSOR_27_TRIS, SENSOR_27_PIN	
	#endif
	#if (SENSOR_ID_PWM_LED == SENSOR_27_TYPE)
		bcf SENSOR_27_TRIS, SENSOR_27_PIN	

		; Stay in bank 1
		movlw 0x80
		movwf SENSOR_27_PWM_VOLUME
		movlw 0x80
		movwf SENSOR_27_PWM_TARGET
		movlw 0x01
		movwf SENSOR_27_PWM_SPEED

		clrf SENSOR_27_ROLLING_TIMER_LOW
	#endif

	#if (SENSOR_ID_TRIAC == SENSOR_27_TYPE)
		bcf SENSOR_27_TRIS, SENSOR_27_PIN	
		; Set tristate for zero-crossing port, too
		bsf SENSOR_27_ZC_PORT, SENSOR_27_ZC_PIN	

		movlw 0x20
		movwf SENSOR_27_PWM_VOLUME
		clrf SENSOR_27_ROLLING_TIMER_LOW
	#endif
#endif
; SENSOR_28
#ifdef SENSOR_28_PRESENT
	#if (SENSOR_ID_GENERIC_DIGITAL_IN == SENSOR_28_TYPE)
		bsf SENSOR_28_TRIS, SENSOR_28_PIN	
	#endif
	#if (SENSOR_ID_GENERIC_DIGITAL_OUT == SENSOR_28_TYPE)
		bcf SENSOR_28_TRIS, SENSOR_28_PIN	
	#endif
	#if (SENSOR_ID_PWM_LED == SENSOR_28_TYPE)
		bcf SENSOR_28_TRIS, SENSOR_28_PIN	

		; Stay in bank 1
		movlw 0x80
		movwf SENSOR_28_PWM_VOLUME
		movlw 0x80
		movwf SENSOR_28_PWM_TARGET
		movlw 0x01
		movwf SENSOR_28_PWM_SPEED

		clrf SENSOR_28_ROLLING_TIMER_LOW
	#endif

	#if (SENSOR_ID_TRIAC == SENSOR_28_TYPE)
		bcf SENSOR_28_TRIS, SENSOR_28_PIN	
		; Set tristate for zero-crossing port, too
		bsf SENSOR_28_ZC_PORT, SENSOR_28_ZC_PIN	

		movlw 0x20
		movwf SENSOR_28_PWM_VOLUME
		clrf SENSOR_28_ROLLING_TIMER_LOW
	#endif
#endif
; SENSOR_29
#ifdef SENSOR_29_PRESENT
	#if (SENSOR_ID_GENERIC_DIGITAL_IN == SENSOR_29_TYPE)
		bsf SENSOR_29_TRIS, SENSOR_29_PIN	
	#endif
	#if (SENSOR_ID_GENERIC_DIGITAL_OUT == SENSOR_29_TYPE)
		bcf SENSOR_29_TRIS, SENSOR_29_PIN	
	#endif
	#if (SENSOR_ID_PWM_LED == SENSOR_29_TYPE)
		bcf SENSOR_29_TRIS, SENSOR_29_PIN	

		; Stay in bank 1
		movlw 0x80
		movwf SENSOR_29_PWM_VOLUME
		movlw 0x80
		movwf SENSOR_29_PWM_TARGET
		movlw 0x01
		movwf SENSOR_29_PWM_SPEED

		clrf SENSOR_29_ROLLING_TIMER_LOW
	#endif

	#if (SENSOR_ID_TRIAC == SENSOR_29_TYPE)
		bcf SENSOR_29_TRIS, SENSOR_29_PIN	
		; Set tristate for zero-crossing port, too
		bsf SENSOR_29_ZC_PORT, SENSOR_29_ZC_PIN	

		movlw 0x20
		movwf SENSOR_29_PWM_VOLUME
		clrf SENSOR_29_ROLLING_TIMER_LOW
	#endif
#endif
; SENSOR_30
#ifdef SENSOR_30_PRESENT
	#if (SENSOR_ID_GENERIC_DIGITAL_IN == SENSOR_30_TYPE)
		bsf SENSOR_30_TRIS, SENSOR_30_PIN	
	#endif
	#if (SENSOR_ID_GENERIC_DIGITAL_OUT == SENSOR_30_TYPE)
		bcf SENSOR_30_TRIS, SENSOR_30_PIN	
	#endif
	#if (SENSOR_ID_PWM_LED == SENSOR_30_TYPE)
		bcf SENSOR_30_TRIS, SENSOR_30_PIN	

		; Stay in bank 1
		movlw 0x80
		movwf SENSOR_30_PWM_VOLUME
		movlw 0x80
		movwf SENSOR_30_PWM_TARGET
		movlw 0x01
		movwf SENSOR_30_PWM_SPEED

		clrf SENSOR_30_ROLLING_TIMER_LOW
	#endif

	#if (SENSOR_ID_TRIAC == SENSOR_30_TYPE)
		bcf SENSOR_30_TRIS, SENSOR_30_PIN	
		; Set tristate for zero-crossing port, too
		bsf SENSOR_30_ZC_PORT, SENSOR_30_ZC_PIN	

		movlw 0x20
		movwf SENSOR_30_PWM_VOLUME
		clrf SENSOR_30_ROLLING_TIMER_LOW
	#endif
#endif
; SENSOR_31
#ifdef SENSOR_31_PRESENT
	#if (SENSOR_ID_GENERIC_DIGITAL_IN == SENSOR_31_TYPE)
		bsf SENSOR_31_TRIS, SENSOR_31_PIN	
	#endif
	#if (SENSOR_ID_GENERIC_DIGITAL_OUT == SENSOR_31_TYPE)
		bcf SENSOR_31_TRIS, SENSOR_31_PIN	
	#endif
	#if (SENSOR_ID_PWM_LED == SENSOR_31_TYPE)
		bcf SENSOR_31_TRIS, SENSOR_31_PIN	

		; Stay in bank 1
		movlw 0x80
		movwf SENSOR_31_PWM_VOLUME
		movlw 0x80
		movwf SENSOR_31_PWM_TARGET
		movlw 0x01
		movwf SENSOR_31_PWM_SPEED

		clrf SENSOR_31_ROLLING_TIMER_LOW
	#endif

	#if (SENSOR_ID_TRIAC == SENSOR_31_TYPE)
		bcf SENSOR_31_TRIS, SENSOR_31_PIN	
		; Set tristate for zero-crossing port, too
		bsf SENSOR_31_ZC_PORT, SENSOR_31_ZC_PIN	

		movlw 0x20
		movwf SENSOR_31_PWM_VOLUME
		clrf SENSOR_31_ROLLING_TIMER_LOW
	#endif
#endif
; SENSOR_32
#ifdef SENSOR_32_PRESENT
	#if (SENSOR_ID_GENERIC_DIGITAL_IN == SENSOR_32_TYPE)
		bsf SENSOR_32_TRIS, SENSOR_32_PIN	
	#endif
	#if (SENSOR_ID_GENERIC_DIGITAL_OUT == SENSOR_32_TYPE)
		bcf SENSOR_32_TRIS, SENSOR_32_PIN	
	#endif
	#if (SENSOR_ID_PWM_LED == SENSOR_32_TYPE)
		bcf SENSOR_32_TRIS, SENSOR_32_PIN	

		; Stay in bank 1
		movlw 0x80
		movwf SENSOR_32_PWM_VOLUME
		movlw 0x80
		movwf SENSOR_32_PWM_TARGET
		movlw 0x01
		movwf SENSOR_32_PWM_SPEED

		clrf SENSOR_32_ROLLING_TIMER_LOW
	#endif

	#if (SENSOR_ID_TRIAC == SENSOR_32_TYPE)
		bcf SENSOR_32_TRIS, SENSOR_32_PIN	
		; Set tristate for zero-crossing port, too
		bsf SENSOR_32_ZC_PORT, SENSOR_32_ZC_PIN	

		movlw 0x20
		movwf SENSOR_32_PWM_VOLUME
		clrf SENSOR_32_ROLLING_TIMER_LOW
	#endif
#endif
; SENSOR_33
#ifdef SENSOR_33_PRESENT
	#if (SENSOR_ID_GENERIC_DIGITAL_IN == SENSOR_33_TYPE)
		bsf SENSOR_33_TRIS, SENSOR_33_PIN	
	#endif
	#if (SENSOR_ID_GENERIC_DIGITAL_OUT == SENSOR_33_TYPE)
		bcf SENSOR_33_TRIS, SENSOR_33_PIN	
	#endif
	#if (SENSOR_ID_PWM_LED == SENSOR_33_TYPE)
		bcf SENSOR_33_TRIS, SENSOR_33_PIN	

		; Stay in bank 1
		movlw 0x80
		movwf SENSOR_33_PWM_VOLUME
		movlw 0x80
		movwf SENSOR_33_PWM_TARGET
		movlw 0x01
		movwf SENSOR_33_PWM_SPEED

		clrf SENSOR_33_ROLLING_TIMER_LOW
	#endif

	#if (SENSOR_ID_TRIAC == SENSOR_33_TYPE)
		bcf SENSOR_33_TRIS, SENSOR_33_PIN	
		; Set tristate for zero-crossing port, too
		bsf SENSOR_33_ZC_PORT, SENSOR_33_ZC_PIN	

		movlw 0x20
		movwf SENSOR_33_PWM_VOLUME
		clrf SENSOR_33_ROLLING_TIMER_LOW
	#endif
#endif
; SENSOR_34
#ifdef SENSOR_34_PRESENT
	#if (SENSOR_ID_GENERIC_DIGITAL_IN == SENSOR_34_TYPE)
		bsf SENSOR_34_TRIS, SENSOR_34_PIN	
	#endif
	#if (SENSOR_ID_GENERIC_DIGITAL_OUT == SENSOR_34_TYPE)
		bcf SENSOR_34_TRIS, SENSOR_34_PIN	
	#endif
	#if (SENSOR_ID_PWM_LED == SENSOR_34_TYPE)
		bcf SENSOR_34_TRIS, SENSOR_34_PIN	

		; Stay in bank 1
		movlw 0x80
		movwf SENSOR_34_PWM_VOLUME
		movlw 0x80
		movwf SENSOR_34_PWM_TARGET
		movlw 0x01
		movwf SENSOR_34_PWM_SPEED

		clrf SENSOR_34_ROLLING_TIMER_LOW
	#endif

	#if (SENSOR_ID_TRIAC == SENSOR_34_TYPE)
		bcf SENSOR_34_TRIS, SENSOR_34_PIN	
		; Set tristate for zero-crossing port, too
		bsf SENSOR_34_ZC_PORT, SENSOR_34_ZC_PIN	

		movlw 0x20
		movwf SENSOR_34_PWM_VOLUME
		clrf SENSOR_34_ROLLING_TIMER_LOW
	#endif
#endif
; SENSOR_35
#ifdef SENSOR_35_PRESENT
	#if (SENSOR_ID_GENERIC_DIGITAL_IN == SENSOR_35_TYPE)
		bsf SENSOR_35_TRIS, SENSOR_35_PIN	
	#endif
	#if (SENSOR_ID_GENERIC_DIGITAL_OUT == SENSOR_35_TYPE)
		bcf SENSOR_35_TRIS, SENSOR_35_PIN	
	#endif
	#if (SENSOR_ID_PWM_LED == SENSOR_35_TYPE)
		bcf SENSOR_35_TRIS, SENSOR_35_PIN	

		; Stay in bank 1
		movlw 0x80
		movwf SENSOR_35_PWM_VOLUME
		movlw 0x80
		movwf SENSOR_35_PWM_TARGET
		movlw 0x01
		movwf SENSOR_35_PWM_SPEED

		clrf SENSOR_35_ROLLING_TIMER_LOW
	#endif

	#if (SENSOR_ID_TRIAC == SENSOR_35_TYPE)
		bcf SENSOR_35_TRIS, SENSOR_35_PIN	
		; Set tristate for zero-crossing port, too
		bsf SENSOR_35_ZC_PORT, SENSOR_35_ZC_PIN	

		movlw 0x20
		movwf SENSOR_35_PWM_VOLUME
		clrf SENSOR_35_ROLLING_TIMER_LOW
	#endif
#endif
; SENSOR_36
#ifdef SENSOR_36_PRESENT
	#if (SENSOR_ID_GENERIC_DIGITAL_IN == SENSOR_36_TYPE)
		bsf SENSOR_36_TRIS, SENSOR_36_PIN	
	#endif
	#if (SENSOR_ID_GENERIC_DIGITAL_OUT == SENSOR_36_TYPE)
		bcf SENSOR_36_TRIS, SENSOR_36_PIN	
	#endif
	#if (SENSOR_ID_PWM_LED == SENSOR_36_TYPE)
		bcf SENSOR_36_TRIS, SENSOR_36_PIN	

		; Stay in bank 1
		movlw 0x80
		movwf SENSOR_36_PWM_VOLUME
		movlw 0x80
		movwf SENSOR_36_PWM_TARGET
		movlw 0x01
		movwf SENSOR_36_PWM_SPEED

		clrf SENSOR_36_ROLLING_TIMER_LOW
	#endif

	#if (SENSOR_ID_TRIAC == SENSOR_36_TYPE)
		bcf SENSOR_36_TRIS, SENSOR_36_PIN	
		; Set tristate for zero-crossing port, too
		bsf SENSOR_36_ZC_PORT, SENSOR_36_ZC_PIN	

		movlw 0x20
		movwf SENSOR_36_PWM_VOLUME
		clrf SENSOR_36_ROLLING_TIMER_LOW
	#endif
#endif
; SENSOR_37
#ifdef SENSOR_37_PRESENT
	#if (SENSOR_ID_GENERIC_DIGITAL_IN == SENSOR_37_TYPE)
		bsf SENSOR_37_TRIS, SENSOR_37_PIN	
	#endif
	#if (SENSOR_ID_GENERIC_DIGITAL_OUT == SENSOR_37_TYPE)
		bcf SENSOR_37_TRIS, SENSOR_37_PIN	
	#endif
	#if (SENSOR_ID_PWM_LED == SENSOR_37_TYPE)
		bcf SENSOR_37_TRIS, SENSOR_37_PIN	

		; Stay in bank 1
		movlw 0x80
		movwf SENSOR_37_PWM_VOLUME
		movlw 0x80
		movwf SENSOR_37_PWM_TARGET
		movlw 0x01
		movwf SENSOR_37_PWM_SPEED

		clrf SENSOR_37_ROLLING_TIMER_LOW
	#endif

	#if (SENSOR_ID_TRIAC == SENSOR_37_TYPE)
		bcf SENSOR_37_TRIS, SENSOR_37_PIN	
		; Set tristate for zero-crossing port, too
		bsf SENSOR_37_ZC_PORT, SENSOR_37_ZC_PIN	

		movlw 0x20
		movwf SENSOR_37_PWM_VOLUME
		clrf SENSOR_37_ROLLING_TIMER_LOW
	#endif
#endif
; SENSOR_38
#ifdef SENSOR_38_PRESENT
	#if (SENSOR_ID_GENERIC_DIGITAL_IN == SENSOR_38_TYPE)
		bsf SENSOR_38_TRIS, SENSOR_38_PIN	
	#endif
	#if (SENSOR_ID_GENERIC_DIGITAL_OUT == SENSOR_38_TYPE)
		bcf SENSOR_38_TRIS, SENSOR_38_PIN	
	#endif
	#if (SENSOR_ID_PWM_LED == SENSOR_38_TYPE)
		bcf SENSOR_38_TRIS, SENSOR_38_PIN	

		; Stay in bank 1
		movlw 0x80
		movwf SENSOR_38_PWM_VOLUME
		movlw 0x80
		movwf SENSOR_38_PWM_TARGET
		movlw 0x01
		movwf SENSOR_38_PWM_SPEED

		clrf SENSOR_38_ROLLING_TIMER_LOW
	#endif

	#if (SENSOR_ID_TRIAC == SENSOR_38_TYPE)
		bcf SENSOR_38_TRIS, SENSOR_38_PIN	
		; Set tristate for zero-crossing port, too
		bsf SENSOR_38_ZC_PORT, SENSOR_38_ZC_PIN	

		movlw 0x20
		movwf SENSOR_38_PWM_VOLUME
		clrf SENSOR_38_ROLLING_TIMER_LOW
	#endif
#endif
; SENSOR_39
#ifdef SENSOR_39_PRESENT
	#if (SENSOR_ID_GENERIC_DIGITAL_IN == SENSOR_39_TYPE)
		bsf SENSOR_39_TRIS, SENSOR_39_PIN	
	#endif
	#if (SENSOR_ID_GENERIC_DIGITAL_OUT == SENSOR_39_TYPE)
		bcf SENSOR_39_TRIS, SENSOR_39_PIN	
	#endif
	#if (SENSOR_ID_PWM_LED == SENSOR_39_TYPE)
		bcf SENSOR_39_TRIS, SENSOR_39_PIN	

		; Stay in bank 1
		movlw 0x80
		movwf SENSOR_39_PWM_VOLUME
		movlw 0x80
		movwf SENSOR_39_PWM_TARGET
		movlw 0x01
		movwf SENSOR_39_PWM_SPEED

		clrf SENSOR_39_ROLLING_TIMER_LOW
	#endif

	#if (SENSOR_ID_TRIAC == SENSOR_39_TYPE)
		bcf SENSOR_39_TRIS, SENSOR_39_PIN	
		; Set tristate for zero-crossing port, too
		bsf SENSOR_39_ZC_PORT, SENSOR_39_ZC_PIN	

		movlw 0x20
		movwf SENSOR_39_PWM_VOLUME
		clrf SENSOR_39_ROLLING_TIMER_LOW
	#endif
#endif
; SENSOR_40
#ifdef SENSOR_40_PRESENT
	#if (SENSOR_ID_GENERIC_DIGITAL_IN == SENSOR_40_TYPE)
		bsf SENSOR_40_TRIS, SENSOR_40_PIN	
	#endif
	#if (SENSOR_ID_GENERIC_DIGITAL_OUT == SENSOR_40_TYPE)
		bcf SENSOR_40_TRIS, SENSOR_40_PIN	
	#endif
	#if (SENSOR_ID_PWM_LED == SENSOR_40_TYPE)
		bcf SENSOR_40_TRIS, SENSOR_40_PIN	

		; Stay in bank 1
		movlw 0x80
		movwf SENSOR_40_PWM_VOLUME
		movlw 0x80
		movwf SENSOR_40_PWM_TARGET
		movlw 0x01
		movwf SENSOR_40_PWM_SPEED

		clrf SENSOR_40_ROLLING_TIMER_LOW
	#endif

	#if (SENSOR_ID_TRIAC == SENSOR_40_TYPE)
		bcf SENSOR_40_TRIS, SENSOR_40_PIN	
		; Set tristate for zero-crossing port, too
		bsf SENSOR_40_ZC_PORT, SENSOR_40_ZC_PIN	

		movlw 0x20
		movwf SENSOR_40_PWM_VOLUME
		clrf SENSOR_40_ROLLING_TIMER_LOW
	#endif
#endif
; SENSOR_41
#ifdef SENSOR_41_PRESENT
	#if (SENSOR_ID_GENERIC_DIGITAL_IN == SENSOR_41_TYPE)
		bsf SENSOR_41_TRIS, SENSOR_41_PIN	
	#endif
	#if (SENSOR_ID_GENERIC_DIGITAL_OUT == SENSOR_41_TYPE)
		bcf SENSOR_41_TRIS, SENSOR_41_PIN	
	#endif
	#if (SENSOR_ID_PWM_LED == SENSOR_41_TYPE)
		bcf SENSOR_41_TRIS, SENSOR_41_PIN	

		; Stay in bank 1
		movlw 0x80
		movwf SENSOR_41_PWM_VOLUME
		movlw 0x80
		movwf SENSOR_41_PWM_TARGET
		movlw 0x01
		movwf SENSOR_41_PWM_SPEED

		clrf SENSOR_41_ROLLING_TIMER_LOW
	#endif

	#if (SENSOR_ID_TRIAC == SENSOR_41_TYPE)
		bcf SENSOR_41_TRIS, SENSOR_41_PIN	
		; Set tristate for zero-crossing port, too
		bsf SENSOR_41_ZC_PORT, SENSOR_41_ZC_PIN	

		movlw 0x20
		movwf SENSOR_41_PWM_VOLUME
		clrf SENSOR_41_ROLLING_TIMER_LOW
	#endif
#endif
; SENSOR_42
#ifdef SENSOR_42_PRESENT
	#if (SENSOR_ID_GENERIC_DIGITAL_IN == SENSOR_42_TYPE)
		bsf SENSOR_42_TRIS, SENSOR_42_PIN	
	#endif
	#if (SENSOR_ID_GENERIC_DIGITAL_OUT == SENSOR_42_TYPE)
		bcf SENSOR_42_TRIS, SENSOR_42_PIN	
	#endif
	#if (SENSOR_ID_PWM_LED == SENSOR_42_TYPE)
		bcf SENSOR_42_TRIS, SENSOR_42_PIN	

		; Stay in bank 1
		movlw 0x80
		movwf SENSOR_42_PWM_VOLUME
		movlw 0x80
		movwf SENSOR_42_PWM_TARGET
		movlw 0x01
		movwf SENSOR_42_PWM_SPEED

		clrf SENSOR_42_ROLLING_TIMER_LOW
	#endif

	#if (SENSOR_ID_TRIAC == SENSOR_42_TYPE)
		bcf SENSOR_42_TRIS, SENSOR_42_PIN	
		; Set tristate for zero-crossing port, too
		bsf SENSOR_42_ZC_PORT, SENSOR_42_ZC_PIN	

		movlw 0x20
		movwf SENSOR_42_PWM_VOLUME
		clrf SENSOR_42_ROLLING_TIMER_LOW
	#endif
#endif
; SENSOR_43
#ifdef SENSOR_43_PRESENT
	#if (SENSOR_ID_GENERIC_DIGITAL_IN == SENSOR_43_TYPE)
		bsf SENSOR_43_TRIS, SENSOR_43_PIN	
	#endif
	#if (SENSOR_ID_GENERIC_DIGITAL_OUT == SENSOR_43_TYPE)
		bcf SENSOR_43_TRIS, SENSOR_43_PIN	
	#endif
	#if (SENSOR_ID_PWM_LED == SENSOR_43_TYPE)
		bcf SENSOR_43_TRIS, SENSOR_43_PIN	

		; Stay in bank 1
		movlw 0x80
		movwf SENSOR_43_PWM_VOLUME
		movlw 0x80
		movwf SENSOR_43_PWM_TARGET
		movlw 0x01
		movwf SENSOR_43_PWM_SPEED

		clrf SENSOR_43_ROLLING_TIMER_LOW
	#endif

	#if (SENSOR_ID_TRIAC == SENSOR_43_TYPE)
		bcf SENSOR_43_TRIS, SENSOR_43_PIN	
		; Set tristate for zero-crossing port, too
		bsf SENSOR_43_ZC_PORT, SENSOR_43_ZC_PIN	

		movlw 0x20
		movwf SENSOR_43_PWM_VOLUME
		clrf SENSOR_43_ROLLING_TIMER_LOW
	#endif
#endif
; SENSOR_44
#ifdef SENSOR_44_PRESENT
	#if (SENSOR_ID_GENERIC_DIGITAL_IN == SENSOR_44_TYPE)
		bsf SENSOR_44_TRIS, SENSOR_44_PIN	
	#endif
	#if (SENSOR_ID_GENERIC_DIGITAL_OUT == SENSOR_44_TYPE)
		bcf SENSOR_44_TRIS, SENSOR_44_PIN	
	#endif
	#if (SENSOR_ID_PWM_LED == SENSOR_44_TYPE)
		bcf SENSOR_44_TRIS, SENSOR_44_PIN	

		; Stay in bank 1
		movlw 0x80
		movwf SENSOR_44_PWM_VOLUME
		movlw 0x80
		movwf SENSOR_44_PWM_TARGET
		movlw 0x01
		movwf SENSOR_44_PWM_SPEED

		clrf SENSOR_44_ROLLING_TIMER_LOW
	#endif

	#if (SENSOR_ID_TRIAC == SENSOR_44_TYPE)
		bcf SENSOR_44_TRIS, SENSOR_44_PIN	
		; Set tristate for zero-crossing port, too
		bsf SENSOR_44_ZC_PORT, SENSOR_44_ZC_PIN	

		movlw 0x20
		movwf SENSOR_44_PWM_VOLUME
		clrf SENSOR_44_ROLLING_TIMER_LOW
	#endif
#endif
; SENSOR_45
#ifdef SENSOR_45_PRESENT
	#if (SENSOR_ID_GENERIC_DIGITAL_IN == SENSOR_45_TYPE)
		bsf SENSOR_45_TRIS, SENSOR_45_PIN	
	#endif
	#if (SENSOR_ID_GENERIC_DIGITAL_OUT == SENSOR_45_TYPE)
		bcf SENSOR_45_TRIS, SENSOR_45_PIN	
	#endif
	#if (SENSOR_ID_PWM_LED == SENSOR_45_TYPE)
		bcf SENSOR_45_TRIS, SENSOR_45_PIN	

		; Stay in bank 1
		movlw 0x80
		movwf SENSOR_45_PWM_VOLUME
		movlw 0x80
		movwf SENSOR_45_PWM_TARGET
		movlw 0x01
		movwf SENSOR_45_PWM_SPEED

		clrf SENSOR_45_ROLLING_TIMER_LOW
	#endif

	#if (SENSOR_ID_TRIAC == SENSOR_45_TYPE)
		bcf SENSOR_45_TRIS, SENSOR_45_PIN	
		; Set tristate for zero-crossing port, too
		bsf SENSOR_45_ZC_PORT, SENSOR_45_ZC_PIN	

		movlw 0x20
		movwf SENSOR_45_PWM_VOLUME
		clrf SENSOR_45_ROLLING_TIMER_LOW
	#endif
#endif
; SENSOR_46
#ifdef SENSOR_46_PRESENT
	#if (SENSOR_ID_GENERIC_DIGITAL_IN == SENSOR_46_TYPE)
		bsf SENSOR_46_TRIS, SENSOR_46_PIN	
	#endif
	#if (SENSOR_ID_GENERIC_DIGITAL_OUT == SENSOR_46_TYPE)
		bcf SENSOR_46_TRIS, SENSOR_46_PIN	
	#endif
	#if (SENSOR_ID_PWM_LED == SENSOR_46_TYPE)
		bcf SENSOR_46_TRIS, SENSOR_46_PIN	

		; Stay in bank 1
		movlw 0x80
		movwf SENSOR_46_PWM_VOLUME
		movlw 0x80
		movwf SENSOR_46_PWM_TARGET
		movlw 0x01
		movwf SENSOR_46_PWM_SPEED

		clrf SENSOR_46_ROLLING_TIMER_LOW
	#endif

	#if (SENSOR_ID_TRIAC == SENSOR_46_TYPE)
		bcf SENSOR_46_TRIS, SENSOR_46_PIN	
		; Set tristate for zero-crossing port, too
		bsf SENSOR_46_ZC_PORT, SENSOR_46_ZC_PIN	

		movlw 0x20
		movwf SENSOR_46_PWM_VOLUME
		clrf SENSOR_46_ROLLING_TIMER_LOW
	#endif
#endif
; SENSOR_47
#ifdef SENSOR_47_PRESENT
	#if (SENSOR_ID_GENERIC_DIGITAL_IN == SENSOR_47_TYPE)
		bsf SENSOR_47_TRIS, SENSOR_47_PIN	
	#endif
	#if (SENSOR_ID_GENERIC_DIGITAL_OUT == SENSOR_47_TYPE)
		bcf SENSOR_47_TRIS, SENSOR_47_PIN	
	#endif
	#if (SENSOR_ID_PWM_LED == SENSOR_47_TYPE)
		bcf SENSOR_47_TRIS, SENSOR_47_PIN	

		; Stay in bank 1
		movlw 0x80
		movwf SENSOR_47_PWM_VOLUME
		movlw 0x80
		movwf SENSOR_47_PWM_TARGET
		movlw 0x01
		movwf SENSOR_47_PWM_SPEED

		clrf SENSOR_47_ROLLING_TIMER_LOW
	#endif

	#if (SENSOR_ID_TRIAC == SENSOR_47_TYPE)
		bcf SENSOR_47_TRIS, SENSOR_47_PIN	
		; Set tristate for zero-crossing port, too
		bsf SENSOR_47_ZC_PORT, SENSOR_47_ZC_PIN	

		movlw 0x20
		movwf SENSOR_47_PWM_VOLUME
		clrf SENSOR_47_ROLLING_TIMER_LOW
	#endif
#endif
; SENSOR_48
#ifdef SENSOR_48_PRESENT
	#if (SENSOR_ID_GENERIC_DIGITAL_IN == SENSOR_48_TYPE)
		bsf SENSOR_48_TRIS, SENSOR_48_PIN	
	#endif
	#if (SENSOR_ID_GENERIC_DIGITAL_OUT == SENSOR_48_TYPE)
		bcf SENSOR_48_TRIS, SENSOR_48_PIN	
	#endif
	#if (SENSOR_ID_PWM_LED == SENSOR_48_TYPE)
		bcf SENSOR_48_TRIS, SENSOR_48_PIN	

		; Stay in bank 1
		movlw 0x80
		movwf SENSOR_48_PWM_VOLUME
		movlw 0x80
		movwf SENSOR_48_PWM_TARGET
		movlw 0x01
		movwf SENSOR_48_PWM_SPEED

		clrf SENSOR_48_ROLLING_TIMER_LOW
	#endif

	#if (SENSOR_ID_TRIAC == SENSOR_48_TYPE)
		bcf SENSOR_48_TRIS, SENSOR_48_PIN	
		; Set tristate for zero-crossing port, too
		bsf SENSOR_48_ZC_PORT, SENSOR_48_ZC_PIN	

		movlw 0x20
		movwf SENSOR_48_PWM_VOLUME
		clrf SENSOR_48_ROLLING_TIMER_LOW
	#endif
#endif
; SENSOR_49
#ifdef SENSOR_49_PRESENT
	#if (SENSOR_ID_GENERIC_DIGITAL_IN == SENSOR_49_TYPE)
		bsf SENSOR_49_TRIS, SENSOR_49_PIN	
	#endif
	#if (SENSOR_ID_GENERIC_DIGITAL_OUT == SENSOR_49_TYPE)
		bcf SENSOR_49_TRIS, SENSOR_49_PIN	
	#endif
	#if (SENSOR_ID_PWM_LED == SENSOR_49_TYPE)
		bcf SENSOR_49_TRIS, SENSOR_49_PIN	

		; Stay in bank 1
		movlw 0x80
		movwf SENSOR_49_PWM_VOLUME
		movlw 0x80
		movwf SENSOR_49_PWM_TARGET
		movlw 0x01
		movwf SENSOR_49_PWM_SPEED

		clrf SENSOR_49_ROLLING_TIMER_LOW
	#endif

	#if (SENSOR_ID_TRIAC == SENSOR_49_TYPE)
		bcf SENSOR_49_TRIS, SENSOR_49_PIN	
		; Set tristate for zero-crossing port, too
		bsf SENSOR_49_ZC_PORT, SENSOR_49_ZC_PIN	

		movlw 0x20
		movwf SENSOR_49_PWM_VOLUME
		clrf SENSOR_49_ROLLING_TIMER_LOW
	#endif
#endif
; SENSOR_50
#ifdef SENSOR_50_PRESENT
	#if (SENSOR_ID_GENERIC_DIGITAL_IN == SENSOR_50_TYPE)
		bsf SENSOR_50_TRIS, SENSOR_50_PIN	
	#endif
	#if (SENSOR_ID_GENERIC_DIGITAL_OUT == SENSOR_50_TYPE)
		bcf SENSOR_50_TRIS, SENSOR_50_PIN	
	#endif
	#if (SENSOR_ID_PWM_LED == SENSOR_50_TYPE)
		bcf SENSOR_50_TRIS, SENSOR_50_PIN	

		; Stay in bank 1
		movlw 0x80
		movwf SENSOR_50_PWM_VOLUME
		movlw 0x80
		movwf SENSOR_50_PWM_TARGET
		movlw 0x01
		movwf SENSOR_50_PWM_SPEED

		clrf SENSOR_50_ROLLING_TIMER_LOW
	#endif

	#if (SENSOR_ID_TRIAC == SENSOR_50_TYPE)
		bcf SENSOR_50_TRIS, SENSOR_50_PIN	
		; Set tristate for zero-crossing port, too
		bsf SENSOR_50_ZC_PORT, SENSOR_50_ZC_PIN	

		movlw 0x20
		movwf SENSOR_50_PWM_VOLUME
		clrf SENSOR_50_ROLLING_TIMER_LOW
	#endif
#endif
; SENSOR_51
#ifdef SENSOR_51_PRESENT
	#if (SENSOR_ID_GENERIC_DIGITAL_IN == SENSOR_51_TYPE)
		bsf SENSOR_51_TRIS, SENSOR_51_PIN	
	#endif
	#if (SENSOR_ID_GENERIC_DIGITAL_OUT == SENSOR_51_TYPE)
		bcf SENSOR_51_TRIS, SENSOR_51_PIN	
	#endif
	#if (SENSOR_ID_PWM_LED == SENSOR_51_TYPE)
		bcf SENSOR_51_TRIS, SENSOR_51_PIN	

		; Stay in bank 1
		movlw 0x80
		movwf SENSOR_51_PWM_VOLUME
		movlw 0x80
		movwf SENSOR_51_PWM_TARGET
		movlw 0x01
		movwf SENSOR_51_PWM_SPEED

		clrf SENSOR_51_ROLLING_TIMER_LOW
	#endif

	#if (SENSOR_ID_TRIAC == SENSOR_51_TYPE)
		bcf SENSOR_51_TRIS, SENSOR_51_PIN	
		; Set tristate for zero-crossing port, too
		bsf SENSOR_51_ZC_PORT, SENSOR_51_ZC_PIN	

		movlw 0x20
		movwf SENSOR_51_PWM_VOLUME
		clrf SENSOR_51_ROLLING_TIMER_LOW
	#endif
#endif
; SENSOR_52
#ifdef SENSOR_52_PRESENT
	#if (SENSOR_ID_GENERIC_DIGITAL_IN == SENSOR_52_TYPE)
		bsf SENSOR_52_TRIS, SENSOR_52_PIN	
	#endif
	#if (SENSOR_ID_GENERIC_DIGITAL_OUT == SENSOR_52_TYPE)
		bcf SENSOR_52_TRIS, SENSOR_52_PIN	
	#endif
	#if (SENSOR_ID_PWM_LED == SENSOR_52_TYPE)
		bcf SENSOR_52_TRIS, SENSOR_52_PIN	

		; Stay in bank 1
		movlw 0x80
		movwf SENSOR_52_PWM_VOLUME
		movlw 0x80
		movwf SENSOR_52_PWM_TARGET
		movlw 0x01
		movwf SENSOR_52_PWM_SPEED

		clrf SENSOR_52_ROLLING_TIMER_LOW
	#endif

	#if (SENSOR_ID_TRIAC == SENSOR_52_TYPE)
		bcf SENSOR_52_TRIS, SENSOR_52_PIN	
		; Set tristate for zero-crossing port, too
		bsf SENSOR_52_ZC_PORT, SENSOR_52_ZC_PIN	

		movlw 0x20
		movwf SENSOR_52_PWM_VOLUME
		clrf SENSOR_52_ROLLING_TIMER_LOW
	#endif
#endif
; SENSOR_53
#ifdef SENSOR_53_PRESENT
	#if (SENSOR_ID_GENERIC_DIGITAL_IN == SENSOR_53_TYPE)
		bsf SENSOR_53_TRIS, SENSOR_53_PIN	
	#endif
	#if (SENSOR_ID_GENERIC_DIGITAL_OUT == SENSOR_53_TYPE)
		bcf SENSOR_53_TRIS, SENSOR_53_PIN	
	#endif
	#if (SENSOR_ID_PWM_LED == SENSOR_53_TYPE)
		bcf SENSOR_53_TRIS, SENSOR_53_PIN	

		; Stay in bank 1
		movlw 0x80
		movwf SENSOR_53_PWM_VOLUME
		movlw 0x80
		movwf SENSOR_53_PWM_TARGET
		movlw 0x01
		movwf SENSOR_53_PWM_SPEED

		clrf SENSOR_53_ROLLING_TIMER_LOW
	#endif

	#if (SENSOR_ID_TRIAC == SENSOR_53_TYPE)
		bcf SENSOR_53_TRIS, SENSOR_53_PIN	
		; Set tristate for zero-crossing port, too
		bsf SENSOR_53_ZC_PORT, SENSOR_53_ZC_PIN	

		movlw 0x20
		movwf SENSOR_53_PWM_VOLUME
		clrf SENSOR_53_ROLLING_TIMER_LOW
	#endif
#endif
; SENSOR_54
#ifdef SENSOR_54_PRESENT
	#if (SENSOR_ID_GENERIC_DIGITAL_IN == SENSOR_54_TYPE)
		bsf SENSOR_54_TRIS, SENSOR_54_PIN	
	#endif
	#if (SENSOR_ID_GENERIC_DIGITAL_OUT == SENSOR_54_TYPE)
		bcf SENSOR_54_TRIS, SENSOR_54_PIN	
	#endif
	#if (SENSOR_ID_PWM_LED == SENSOR_54_TYPE)
		bcf SENSOR_54_TRIS, SENSOR_54_PIN	

		; Stay in bank 1
		movlw 0x80
		movwf SENSOR_54_PWM_VOLUME
		movlw 0x80
		movwf SENSOR_54_PWM_TARGET
		movlw 0x01
		movwf SENSOR_54_PWM_SPEED

		clrf SENSOR_54_ROLLING_TIMER_LOW
	#endif

	#if (SENSOR_ID_TRIAC == SENSOR_54_TYPE)
		bcf SENSOR_54_TRIS, SENSOR_54_PIN	
		; Set tristate for zero-crossing port, too
		bsf SENSOR_54_ZC_PORT, SENSOR_54_ZC_PIN	

		movlw 0x20
		movwf SENSOR_54_PWM_VOLUME
		clrf SENSOR_54_ROLLING_TIMER_LOW
	#endif
#endif
; SENSOR_55
#ifdef SENSOR_55_PRESENT
	#if (SENSOR_ID_GENERIC_DIGITAL_IN == SENSOR_55_TYPE)
		bsf SENSOR_55_TRIS, SENSOR_55_PIN	
	#endif
	#if (SENSOR_ID_GENERIC_DIGITAL_OUT == SENSOR_55_TYPE)
		bcf SENSOR_55_TRIS, SENSOR_55_PIN	
	#endif
	#if (SENSOR_ID_PWM_LED == SENSOR_55_TYPE)
		bcf SENSOR_55_TRIS, SENSOR_55_PIN	

		; Stay in bank 1
		movlw 0x80
		movwf SENSOR_55_PWM_VOLUME
		movlw 0x80
		movwf SENSOR_55_PWM_TARGET
		movlw 0x01
		movwf SENSOR_55_PWM_SPEED

		clrf SENSOR_55_ROLLING_TIMER_LOW
	#endif

	#if (SENSOR_ID_TRIAC == SENSOR_55_TYPE)
		bcf SENSOR_55_TRIS, SENSOR_55_PIN	
		; Set tristate for zero-crossing port, too
		bsf SENSOR_55_ZC_PORT, SENSOR_55_ZC_PIN	

		movlw 0x20
		movwf SENSOR_55_PWM_VOLUME
		clrf SENSOR_55_ROLLING_TIMER_LOW
	#endif
#endif
; SENSOR_56
#ifdef SENSOR_56_PRESENT
	#if (SENSOR_ID_GENERIC_DIGITAL_IN == SENSOR_56_TYPE)
		bsf SENSOR_56_TRIS, SENSOR_56_PIN	
	#endif
	#if (SENSOR_ID_GENERIC_DIGITAL_OUT == SENSOR_56_TYPE)
		bcf SENSOR_56_TRIS, SENSOR_56_PIN	
	#endif
	#if (SENSOR_ID_PWM_LED == SENSOR_56_TYPE)
		bcf SENSOR_56_TRIS, SENSOR_56_PIN	

		; Stay in bank 1
		movlw 0x80
		movwf SENSOR_56_PWM_VOLUME
		movlw 0x80
		movwf SENSOR_56_PWM_TARGET
		movlw 0x01
		movwf SENSOR_56_PWM_SPEED

		clrf SENSOR_56_ROLLING_TIMER_LOW
	#endif

	#if (SENSOR_ID_TRIAC == SENSOR_56_TYPE)
		bcf SENSOR_56_TRIS, SENSOR_56_PIN	
		; Set tristate for zero-crossing port, too
		bsf SENSOR_56_ZC_PORT, SENSOR_56_ZC_PIN	

		movlw 0x20
		movwf SENSOR_56_PWM_VOLUME
		clrf SENSOR_56_ROLLING_TIMER_LOW
	#endif
#endif
; SENSOR_57
#ifdef SENSOR_57_PRESENT
	#if (SENSOR_ID_GENERIC_DIGITAL_IN == SENSOR_57_TYPE)
		bsf SENSOR_57_TRIS, SENSOR_57_PIN	
	#endif
	#if (SENSOR_ID_GENERIC_DIGITAL_OUT == SENSOR_57_TYPE)
		bcf SENSOR_57_TRIS, SENSOR_57_PIN	
	#endif
	#if (SENSOR_ID_PWM_LED == SENSOR_57_TYPE)
		bcf SENSOR_57_TRIS, SENSOR_57_PIN	

		; Stay in bank 1
		movlw 0x80
		movwf SENSOR_57_PWM_VOLUME
		movlw 0x80
		movwf SENSOR_57_PWM_TARGET
		movlw 0x01
		movwf SENSOR_57_PWM_SPEED

		clrf SENSOR_57_ROLLING_TIMER_LOW
	#endif

	#if (SENSOR_ID_TRIAC == SENSOR_57_TYPE)
		bcf SENSOR_57_TRIS, SENSOR_57_PIN	
		; Set tristate for zero-crossing port, too
		bsf SENSOR_57_ZC_PORT, SENSOR_57_ZC_PIN	

		movlw 0x20
		movwf SENSOR_57_PWM_VOLUME
		clrf SENSOR_57_ROLLING_TIMER_LOW
	#endif
#endif
; SENSOR_58
#ifdef SENSOR_58_PRESENT
	#if (SENSOR_ID_GENERIC_DIGITAL_IN == SENSOR_58_TYPE)
		bsf SENSOR_58_TRIS, SENSOR_58_PIN	
	#endif
	#if (SENSOR_ID_GENERIC_DIGITAL_OUT == SENSOR_58_TYPE)
		bcf SENSOR_58_TRIS, SENSOR_58_PIN	
	#endif
	#if (SENSOR_ID_PWM_LED == SENSOR_58_TYPE)
		bcf SENSOR_58_TRIS, SENSOR_58_PIN	

		; Stay in bank 1
		movlw 0x80
		movwf SENSOR_58_PWM_VOLUME
		movlw 0x80
		movwf SENSOR_58_PWM_TARGET
		movlw 0x01
		movwf SENSOR_58_PWM_SPEED

		clrf SENSOR_58_ROLLING_TIMER_LOW
	#endif

	#if (SENSOR_ID_TRIAC == SENSOR_58_TYPE)
		bcf SENSOR_58_TRIS, SENSOR_58_PIN	
		; Set tristate for zero-crossing port, too
		bsf SENSOR_58_ZC_PORT, SENSOR_58_ZC_PIN	

		movlw 0x20
		movwf SENSOR_58_PWM_VOLUME
		clrf SENSOR_58_ROLLING_TIMER_LOW
	#endif
#endif
; SENSOR_59
#ifdef SENSOR_59_PRESENT
	#if (SENSOR_ID_GENERIC_DIGITAL_IN == SENSOR_59_TYPE)
		bsf SENSOR_59_TRIS, SENSOR_59_PIN	
	#endif
	#if (SENSOR_ID_GENERIC_DIGITAL_OUT == SENSOR_59_TYPE)
		bcf SENSOR_59_TRIS, SENSOR_59_PIN	
	#endif
	#if (SENSOR_ID_PWM_LED == SENSOR_59_TYPE)
		bcf SENSOR_59_TRIS, SENSOR_59_PIN	

		; Stay in bank 1
		movlw 0x80
		movwf SENSOR_59_PWM_VOLUME
		movlw 0x80
		movwf SENSOR_59_PWM_TARGET
		movlw 0x01
		movwf SENSOR_59_PWM_SPEED

		clrf SENSOR_59_ROLLING_TIMER_LOW
	#endif

	#if (SENSOR_ID_TRIAC == SENSOR_59_TYPE)
		bcf SENSOR_59_TRIS, SENSOR_59_PIN	
		; Set tristate for zero-crossing port, too
		bsf SENSOR_59_ZC_PORT, SENSOR_59_ZC_PIN	

		movlw 0x20
		movwf SENSOR_59_PWM_VOLUME
		clrf SENSOR_59_ROLLING_TIMER_LOW
	#endif
#endif
; SENSOR_60
#ifdef SENSOR_60_PRESENT
	#if (SENSOR_ID_GENERIC_DIGITAL_IN == SENSOR_60_TYPE)
		bsf SENSOR_60_TRIS, SENSOR_60_PIN	
	#endif
	#if (SENSOR_ID_GENERIC_DIGITAL_OUT == SENSOR_60_TYPE)
		bcf SENSOR_60_TRIS, SENSOR_60_PIN	
	#endif
	#if (SENSOR_ID_PWM_LED == SENSOR_60_TYPE)
		bcf SENSOR_60_TRIS, SENSOR_60_PIN	

		; Stay in bank 1
		movlw 0x80
		movwf SENSOR_60_PWM_VOLUME
		movlw 0x80
		movwf SENSOR_60_PWM_TARGET
		movlw 0x01
		movwf SENSOR_60_PWM_SPEED

		clrf SENSOR_60_ROLLING_TIMER_LOW
	#endif

	#if (SENSOR_ID_TRIAC == SENSOR_60_TYPE)
		bcf SENSOR_60_TRIS, SENSOR_60_PIN	
		; Set tristate for zero-crossing port, too
		bsf SENSOR_60_ZC_PORT, SENSOR_60_ZC_PIN	

		movlw 0x20
		movwf SENSOR_60_PWM_VOLUME
		clrf SENSOR_60_ROLLING_TIMER_LOW
	#endif
#endif
; SENSOR_61
#ifdef SENSOR_61_PRESENT
	#if (SENSOR_ID_GENERIC_DIGITAL_IN == SENSOR_61_TYPE)
		bsf SENSOR_61_TRIS, SENSOR_61_PIN	
	#endif
	#if (SENSOR_ID_GENERIC_DIGITAL_OUT == SENSOR_61_TYPE)
		bcf SENSOR_61_TRIS, SENSOR_61_PIN	
	#endif
	#if (SENSOR_ID_PWM_LED == SENSOR_61_TYPE)
		bcf SENSOR_61_TRIS, SENSOR_61_PIN	

		; Stay in bank 1
		movlw 0x80
		movwf SENSOR_61_PWM_VOLUME
		movlw 0x80
		movwf SENSOR_61_PWM_TARGET
		movlw 0x01
		movwf SENSOR_61_PWM_SPEED

		clrf SENSOR_61_ROLLING_TIMER_LOW
	#endif

	#if (SENSOR_ID_TRIAC == SENSOR_61_TYPE)
		bcf SENSOR_61_TRIS, SENSOR_61_PIN	
		; Set tristate for zero-crossing port, too
		bsf SENSOR_61_ZC_PORT, SENSOR_61_ZC_PIN	

		movlw 0x20
		movwf SENSOR_61_PWM_VOLUME
		clrf SENSOR_61_ROLLING_TIMER_LOW
	#endif
#endif
; SENSOR_62
#ifdef SENSOR_62_PRESENT
	#if (SENSOR_ID_GENERIC_DIGITAL_IN == SENSOR_62_TYPE)
		bsf SENSOR_62_TRIS, SENSOR_62_PIN	
	#endif
	#if (SENSOR_ID_GENERIC_DIGITAL_OUT == SENSOR_62_TYPE)
		bcf SENSOR_62_TRIS, SENSOR_62_PIN	
	#endif
	#if (SENSOR_ID_PWM_LED == SENSOR_62_TYPE)
		bcf SENSOR_62_TRIS, SENSOR_62_PIN	

		; Stay in bank 1
		movlw 0x80
		movwf SENSOR_62_PWM_VOLUME
		movlw 0x80
		movwf SENSOR_62_PWM_TARGET
		movlw 0x01
		movwf SENSOR_62_PWM_SPEED

		clrf SENSOR_62_ROLLING_TIMER_LOW
	#endif

	#if (SENSOR_ID_TRIAC == SENSOR_62_TYPE)
		bcf SENSOR_62_TRIS, SENSOR_62_PIN	
		; Set tristate for zero-crossing port, too
		bsf SENSOR_62_ZC_PORT, SENSOR_62_ZC_PIN	

		movlw 0x20
		movwf SENSOR_62_PWM_VOLUME
		clrf SENSOR_62_ROLLING_TIMER_LOW
	#endif
#endif
; SENSOR_63
#ifdef SENSOR_63_PRESENT
	#if (SENSOR_ID_GENERIC_DIGITAL_IN == SENSOR_63_TYPE)
		bsf SENSOR_63_TRIS, SENSOR_63_PIN	
	#endif
	#if (SENSOR_ID_GENERIC_DIGITAL_OUT == SENSOR_63_TYPE)
		bcf SENSOR_63_TRIS, SENSOR_63_PIN	
	#endif
	#if (SENSOR_ID_PWM_LED == SENSOR_63_TYPE)
		bcf SENSOR_63_TRIS, SENSOR_63_PIN	

		; Stay in bank 1
		movlw 0x80
		movwf SENSOR_63_PWM_VOLUME
		movlw 0x80
		movwf SENSOR_63_PWM_TARGET
		movlw 0x01
		movwf SENSOR_63_PWM_SPEED

		clrf SENSOR_63_ROLLING_TIMER_LOW
	#endif

	#if (SENSOR_ID_TRIAC == SENSOR_63_TYPE)
		bcf SENSOR_63_TRIS, SENSOR_63_PIN	
		; Set tristate for zero-crossing port, too
		bsf SENSOR_63_ZC_PORT, SENSOR_63_ZC_PIN	

		movlw 0x20
		movwf SENSOR_63_PWM_VOLUME
		clrf SENSOR_63_ROLLING_TIMER_LOW
	#endif
#endif
; SENSOR_64
#ifdef SENSOR_64_PRESENT
	#if (SENSOR_ID_GENERIC_DIGITAL_IN == SENSOR_64_TYPE)
		bsf SENSOR_64_TRIS, SENSOR_64_PIN	
	#endif
	#if (SENSOR_ID_GENERIC_DIGITAL_OUT == SENSOR_64_TYPE)
		bcf SENSOR_64_TRIS, SENSOR_64_PIN	
	#endif
	#if (SENSOR_ID_PWM_LED == SENSOR_64_TYPE)
		bcf SENSOR_64_TRIS, SENSOR_64_PIN	

		; Stay in bank 1
		movlw 0x80
		movwf SENSOR_64_PWM_VOLUME
		movlw 0x80
		movwf SENSOR_64_PWM_TARGET
		movlw 0x01
		movwf SENSOR_64_PWM_SPEED

		clrf SENSOR_64_ROLLING_TIMER_LOW
	#endif

	#if (SENSOR_ID_TRIAC == SENSOR_64_TYPE)
		bcf SENSOR_64_TRIS, SENSOR_64_PIN	
		; Set tristate for zero-crossing port, too
		bsf SENSOR_64_ZC_PORT, SENSOR_64_ZC_PIN	

		movlw 0x20
		movwf SENSOR_64_PWM_VOLUME
		clrf SENSOR_64_ROLLING_TIMER_LOW
	#endif
#endif
; SENSOR_65
#ifdef SENSOR_65_PRESENT
	#if (SENSOR_ID_GENERIC_DIGITAL_IN == SENSOR_65_TYPE)
		bsf SENSOR_65_TRIS, SENSOR_65_PIN	
	#endif
	#if (SENSOR_ID_GENERIC_DIGITAL_OUT == SENSOR_65_TYPE)
		bcf SENSOR_65_TRIS, SENSOR_65_PIN	
	#endif
	#if (SENSOR_ID_PWM_LED == SENSOR_65_TYPE)
		bcf SENSOR_65_TRIS, SENSOR_65_PIN	

		; Stay in bank 1
		movlw 0x80
		movwf SENSOR_65_PWM_VOLUME
		movlw 0x80
		movwf SENSOR_65_PWM_TARGET
		movlw 0x01
		movwf SENSOR_65_PWM_SPEED

		clrf SENSOR_65_ROLLING_TIMER_LOW
	#endif

	#if (SENSOR_ID_TRIAC == SENSOR_65_TYPE)
		bcf SENSOR_65_TRIS, SENSOR_65_PIN	
		; Set tristate for zero-crossing port, too
		bsf SENSOR_65_ZC_PORT, SENSOR_65_ZC_PIN	

		movlw 0x20
		movwf SENSOR_65_PWM_VOLUME
		clrf SENSOR_65_ROLLING_TIMER_LOW
	#endif
#endif
; SENSOR_66
#ifdef SENSOR_66_PRESENT
	#if (SENSOR_ID_GENERIC_DIGITAL_IN == SENSOR_66_TYPE)
		bsf SENSOR_66_TRIS, SENSOR_66_PIN	
	#endif
	#if (SENSOR_ID_GENERIC_DIGITAL_OUT == SENSOR_66_TYPE)
		bcf SENSOR_66_TRIS, SENSOR_66_PIN	
	#endif
	#if (SENSOR_ID_PWM_LED == SENSOR_66_TYPE)
		bcf SENSOR_66_TRIS, SENSOR_66_PIN	

		; Stay in bank 1
		movlw 0x80
		movwf SENSOR_66_PWM_VOLUME
		movlw 0x80
		movwf SENSOR_66_PWM_TARGET
		movlw 0x01
		movwf SENSOR_66_PWM_SPEED

		clrf SENSOR_66_ROLLING_TIMER_LOW
	#endif

	#if (SENSOR_ID_TRIAC == SENSOR_66_TYPE)
		bcf SENSOR_66_TRIS, SENSOR_66_PIN	
		; Set tristate for zero-crossing port, too
		bsf SENSOR_66_ZC_PORT, SENSOR_66_ZC_PIN	

		movlw 0x20
		movwf SENSOR_66_PWM_VOLUME
		clrf SENSOR_66_ROLLING_TIMER_LOW
	#endif
#endif
; SENSOR_67
#ifdef SENSOR_67_PRESENT
	#if (SENSOR_ID_GENERIC_DIGITAL_IN == SENSOR_67_TYPE)
		bsf SENSOR_67_TRIS, SENSOR_67_PIN	
	#endif
	#if (SENSOR_ID_GENERIC_DIGITAL_OUT == SENSOR_67_TYPE)
		bcf SENSOR_67_TRIS, SENSOR_67_PIN	
	#endif
	#if (SENSOR_ID_PWM_LED == SENSOR_67_TYPE)
		bcf SENSOR_67_TRIS, SENSOR_67_PIN	

		; Stay in bank 1
		movlw 0x80
		movwf SENSOR_67_PWM_VOLUME
		movlw 0x80
		movwf SENSOR_67_PWM_TARGET
		movlw 0x01
		movwf SENSOR_67_PWM_SPEED

		clrf SENSOR_67_ROLLING_TIMER_LOW
	#endif

	#if (SENSOR_ID_TRIAC == SENSOR_67_TYPE)
		bcf SENSOR_67_TRIS, SENSOR_67_PIN	
		; Set tristate for zero-crossing port, too
		bsf SENSOR_67_ZC_PORT, SENSOR_67_ZC_PIN	

		movlw 0x20
		movwf SENSOR_67_PWM_VOLUME
		clrf SENSOR_67_ROLLING_TIMER_LOW
	#endif
#endif
; SENSOR_68
#ifdef SENSOR_68_PRESENT
	#if (SENSOR_ID_GENERIC_DIGITAL_IN == SENSOR_68_TYPE)
		bsf SENSOR_68_TRIS, SENSOR_68_PIN	
	#endif
	#if (SENSOR_ID_GENERIC_DIGITAL_OUT == SENSOR_68_TYPE)
		bcf SENSOR_68_TRIS, SENSOR_68_PIN	
	#endif
	#if (SENSOR_ID_PWM_LED == SENSOR_68_TYPE)
		bcf SENSOR_68_TRIS, SENSOR_68_PIN	

		; Stay in bank 1
		movlw 0x80
		movwf SENSOR_68_PWM_VOLUME
		movlw 0x80
		movwf SENSOR_68_PWM_TARGET
		movlw 0x01
		movwf SENSOR_68_PWM_SPEED

		clrf SENSOR_68_ROLLING_TIMER_LOW
	#endif

	#if (SENSOR_ID_TRIAC == SENSOR_68_TYPE)
		bcf SENSOR_68_TRIS, SENSOR_68_PIN	
		; Set tristate for zero-crossing port, too
		bsf SENSOR_68_ZC_PORT, SENSOR_68_ZC_PIN	

		movlw 0x20
		movwf SENSOR_68_PWM_VOLUME
		clrf SENSOR_68_ROLLING_TIMER_LOW
	#endif
#endif
; SENSOR_69
#ifdef SENSOR_69_PRESENT
	#if (SENSOR_ID_GENERIC_DIGITAL_IN == SENSOR_69_TYPE)
		bsf SENSOR_69_TRIS, SENSOR_69_PIN	
	#endif
	#if (SENSOR_ID_GENERIC_DIGITAL_OUT == SENSOR_69_TYPE)
		bcf SENSOR_69_TRIS, SENSOR_69_PIN	
	#endif
	#if (SENSOR_ID_PWM_LED == SENSOR_69_TYPE)
		bcf SENSOR_69_TRIS, SENSOR_69_PIN	

		; Stay in bank 1
		movlw 0x80
		movwf SENSOR_69_PWM_VOLUME
		movlw 0x80
		movwf SENSOR_69_PWM_TARGET
		movlw 0x01
		movwf SENSOR_69_PWM_SPEED

		clrf SENSOR_69_ROLLING_TIMER_LOW
	#endif

	#if (SENSOR_ID_TRIAC == SENSOR_69_TYPE)
		bcf SENSOR_69_TRIS, SENSOR_69_PIN	
		; Set tristate for zero-crossing port, too
		bsf SENSOR_69_ZC_PORT, SENSOR_69_ZC_PIN	

		movlw 0x20
		movwf SENSOR_69_PWM_VOLUME
		clrf SENSOR_69_ROLLING_TIMER_LOW
	#endif
#endif
; SENSOR_70
#ifdef SENSOR_70_PRESENT
	#if (SENSOR_ID_GENERIC_DIGITAL_IN == SENSOR_70_TYPE)
		bsf SENSOR_70_TRIS, SENSOR_70_PIN	
	#endif
	#if (SENSOR_ID_GENERIC_DIGITAL_OUT == SENSOR_70_TYPE)
		bcf SENSOR_70_TRIS, SENSOR_70_PIN	
	#endif
	#if (SENSOR_ID_PWM_LED == SENSOR_70_TYPE)
		bcf SENSOR_70_TRIS, SENSOR_70_PIN	

		; Stay in bank 1
		movlw 0x80
		movwf SENSOR_70_PWM_VOLUME
		movlw 0x80
		movwf SENSOR_70_PWM_TARGET
		movlw 0x01
		movwf SENSOR_70_PWM_SPEED

		clrf SENSOR_70_ROLLING_TIMER_LOW
	#endif

	#if (SENSOR_ID_TRIAC == SENSOR_70_TYPE)
		bcf SENSOR_70_TRIS, SENSOR_70_PIN	
		; Set tristate for zero-crossing port, too
		bsf SENSOR_70_ZC_PORT, SENSOR_70_ZC_PIN	

		movlw 0x20
		movwf SENSOR_70_PWM_VOLUME
		clrf SENSOR_70_ROLLING_TIMER_LOW
	#endif
#endif
; SENSOR_71
#ifdef SENSOR_71_PRESENT
	#if (SENSOR_ID_GENERIC_DIGITAL_IN == SENSOR_71_TYPE)
		bsf SENSOR_71_TRIS, SENSOR_71_PIN	
	#endif
	#if (SENSOR_ID_GENERIC_DIGITAL_OUT == SENSOR_71_TYPE)
		bcf SENSOR_71_TRIS, SENSOR_71_PIN	
	#endif
	#if (SENSOR_ID_PWM_LED == SENSOR_71_TYPE)
		bcf SENSOR_71_TRIS, SENSOR_71_PIN	

		; Stay in bank 1
		movlw 0x80
		movwf SENSOR_71_PWM_VOLUME
		movlw 0x80
		movwf SENSOR_71_PWM_TARGET
		movlw 0x01
		movwf SENSOR_71_PWM_SPEED

		clrf SENSOR_71_ROLLING_TIMER_LOW
	#endif

	#if (SENSOR_ID_TRIAC == SENSOR_71_TYPE)
		bcf SENSOR_71_TRIS, SENSOR_71_PIN	
		; Set tristate for zero-crossing port, too
		bsf SENSOR_71_ZC_PORT, SENSOR_71_ZC_PIN	

		movlw 0x20
		movwf SENSOR_71_PWM_VOLUME
		clrf SENSOR_71_ROLLING_TIMER_LOW
	#endif
#endif
; SENSOR_72
#ifdef SENSOR_72_PRESENT
	#if (SENSOR_ID_GENERIC_DIGITAL_IN == SENSOR_72_TYPE)
		bsf SENSOR_72_TRIS, SENSOR_72_PIN	
	#endif
	#if (SENSOR_ID_GENERIC_DIGITAL_OUT == SENSOR_72_TYPE)
		bcf SENSOR_72_TRIS, SENSOR_72_PIN	
	#endif
	#if (SENSOR_ID_PWM_LED == SENSOR_72_TYPE)
		bcf SENSOR_72_TRIS, SENSOR_72_PIN	

		; Stay in bank 1
		movlw 0x80
		movwf SENSOR_72_PWM_VOLUME
		movlw 0x80
		movwf SENSOR_72_PWM_TARGET
		movlw 0x01
		movwf SENSOR_72_PWM_SPEED

		clrf SENSOR_72_ROLLING_TIMER_LOW
	#endif

	#if (SENSOR_ID_TRIAC == SENSOR_72_TYPE)
		bcf SENSOR_72_TRIS, SENSOR_72_PIN	
		; Set tristate for zero-crossing port, too
		bsf SENSOR_72_ZC_PORT, SENSOR_72_ZC_PIN	

		movlw 0x20
		movwf SENSOR_72_PWM_VOLUME
		clrf SENSOR_72_ROLLING_TIMER_LOW
	#endif
#endif
; SENSOR_73
#ifdef SENSOR_73_PRESENT
	#if (SENSOR_ID_GENERIC_DIGITAL_IN == SENSOR_73_TYPE)
		bsf SENSOR_73_TRIS, SENSOR_73_PIN	
	#endif
	#if (SENSOR_ID_GENERIC_DIGITAL_OUT == SENSOR_73_TYPE)
		bcf SENSOR_73_TRIS, SENSOR_73_PIN	
	#endif
	#if (SENSOR_ID_PWM_LED == SENSOR_73_TYPE)
		bcf SENSOR_73_TRIS, SENSOR_73_PIN	

		; Stay in bank 1
		movlw 0x80
		movwf SENSOR_73_PWM_VOLUME
		movlw 0x80
		movwf SENSOR_73_PWM_TARGET
		movlw 0x01
		movwf SENSOR_73_PWM_SPEED

		clrf SENSOR_73_ROLLING_TIMER_LOW
	#endif

	#if (SENSOR_ID_TRIAC == SENSOR_73_TYPE)
		bcf SENSOR_73_TRIS, SENSOR_73_PIN	
		; Set tristate for zero-crossing port, too
		bsf SENSOR_73_ZC_PORT, SENSOR_73_ZC_PIN	

		movlw 0x20
		movwf SENSOR_73_PWM_VOLUME
		clrf SENSOR_73_ROLLING_TIMER_LOW
	#endif
#endif
; SENSOR_74
#ifdef SENSOR_74_PRESENT
	#if (SENSOR_ID_GENERIC_DIGITAL_IN == SENSOR_74_TYPE)
		bsf SENSOR_74_TRIS, SENSOR_74_PIN	
	#endif
	#if (SENSOR_ID_GENERIC_DIGITAL_OUT == SENSOR_74_TYPE)
		bcf SENSOR_74_TRIS, SENSOR_74_PIN	
	#endif
	#if (SENSOR_ID_PWM_LED == SENSOR_74_TYPE)
		bcf SENSOR_74_TRIS, SENSOR_74_PIN	

		; Stay in bank 1
		movlw 0x80
		movwf SENSOR_74_PWM_VOLUME
		movlw 0x80
		movwf SENSOR_74_PWM_TARGET
		movlw 0x01
		movwf SENSOR_74_PWM_SPEED

		clrf SENSOR_74_ROLLING_TIMER_LOW
	#endif

	#if (SENSOR_ID_TRIAC == SENSOR_74_TYPE)
		bcf SENSOR_74_TRIS, SENSOR_74_PIN	
		; Set tristate for zero-crossing port, too
		bsf SENSOR_74_ZC_PORT, SENSOR_74_ZC_PIN	

		movlw 0x20
		movwf SENSOR_74_PWM_VOLUME
		clrf SENSOR_74_ROLLING_TIMER_LOW
	#endif
#endif
; SENSOR_75
#ifdef SENSOR_75_PRESENT
	#if (SENSOR_ID_GENERIC_DIGITAL_IN == SENSOR_75_TYPE)
		bsf SENSOR_75_TRIS, SENSOR_75_PIN	
	#endif
	#if (SENSOR_ID_GENERIC_DIGITAL_OUT == SENSOR_75_TYPE)
		bcf SENSOR_75_TRIS, SENSOR_75_PIN	
	#endif
	#if (SENSOR_ID_PWM_LED == SENSOR_75_TYPE)
		bcf SENSOR_75_TRIS, SENSOR_75_PIN	

		; Stay in bank 1
		movlw 0x80
		movwf SENSOR_75_PWM_VOLUME
		movlw 0x80
		movwf SENSOR_75_PWM_TARGET
		movlw 0x01
		movwf SENSOR_75_PWM_SPEED

		clrf SENSOR_75_ROLLING_TIMER_LOW
	#endif

	#if (SENSOR_ID_TRIAC == SENSOR_75_TYPE)
		bcf SENSOR_75_TRIS, SENSOR_75_PIN	
		; Set tristate for zero-crossing port, too
		bsf SENSOR_75_ZC_PORT, SENSOR_75_ZC_PIN	

		movlw 0x20
		movwf SENSOR_75_PWM_VOLUME
		clrf SENSOR_75_ROLLING_TIMER_LOW
	#endif
#endif
; SENSOR_76
#ifdef SENSOR_76_PRESENT
	#if (SENSOR_ID_GENERIC_DIGITAL_IN == SENSOR_76_TYPE)
		bsf SENSOR_76_TRIS, SENSOR_76_PIN	
	#endif
	#if (SENSOR_ID_GENERIC_DIGITAL_OUT == SENSOR_76_TYPE)
		bcf SENSOR_76_TRIS, SENSOR_76_PIN	
	#endif
	#if (SENSOR_ID_PWM_LED == SENSOR_76_TYPE)
		bcf SENSOR_76_TRIS, SENSOR_76_PIN	

		; Stay in bank 1
		movlw 0x80
		movwf SENSOR_76_PWM_VOLUME
		movlw 0x80
		movwf SENSOR_76_PWM_TARGET
		movlw 0x01
		movwf SENSOR_76_PWM_SPEED

		clrf SENSOR_76_ROLLING_TIMER_LOW
	#endif

	#if (SENSOR_ID_TRIAC == SENSOR_76_TYPE)
		bcf SENSOR_76_TRIS, SENSOR_76_PIN	
		; Set tristate for zero-crossing port, too
		bsf SENSOR_76_ZC_PORT, SENSOR_76_ZC_PIN	

		movlw 0x20
		movwf SENSOR_76_PWM_VOLUME
		clrf SENSOR_76_ROLLING_TIMER_LOW
	#endif
#endif
; SENSOR_77
#ifdef SENSOR_77_PRESENT
	#if (SENSOR_ID_GENERIC_DIGITAL_IN == SENSOR_77_TYPE)
		bsf SENSOR_77_TRIS, SENSOR_77_PIN	
	#endif
	#if (SENSOR_ID_GENERIC_DIGITAL_OUT == SENSOR_77_TYPE)
		bcf SENSOR_77_TRIS, SENSOR_77_PIN	
	#endif
	#if (SENSOR_ID_PWM_LED == SENSOR_77_TYPE)
		bcf SENSOR_77_TRIS, SENSOR_77_PIN	

		; Stay in bank 1
		movlw 0x80
		movwf SENSOR_77_PWM_VOLUME
		movlw 0x80
		movwf SENSOR_77_PWM_TARGET
		movlw 0x01
		movwf SENSOR_77_PWM_SPEED

		clrf SENSOR_77_ROLLING_TIMER_LOW
	#endif

	#if (SENSOR_ID_TRIAC == SENSOR_77_TYPE)
		bcf SENSOR_77_TRIS, SENSOR_77_PIN	
		; Set tristate for zero-crossing port, too
		bsf SENSOR_77_ZC_PORT, SENSOR_77_ZC_PIN	

		movlw 0x20
		movwf SENSOR_77_PWM_VOLUME
		clrf SENSOR_77_ROLLING_TIMER_LOW
	#endif
#endif
; SENSOR_78
#ifdef SENSOR_78_PRESENT
	#if (SENSOR_ID_GENERIC_DIGITAL_IN == SENSOR_78_TYPE)
		bsf SENSOR_78_TRIS, SENSOR_78_PIN	
	#endif
	#if (SENSOR_ID_GENERIC_DIGITAL_OUT == SENSOR_78_TYPE)
		bcf SENSOR_78_TRIS, SENSOR_78_PIN	
	#endif
	#if (SENSOR_ID_PWM_LED == SENSOR_78_TYPE)
		bcf SENSOR_78_TRIS, SENSOR_78_PIN	

		; Stay in bank 1
		movlw 0x80
		movwf SENSOR_78_PWM_VOLUME
		movlw 0x80
		movwf SENSOR_78_PWM_TARGET
		movlw 0x01
		movwf SENSOR_78_PWM_SPEED

		clrf SENSOR_78_ROLLING_TIMER_LOW
	#endif

	#if (SENSOR_ID_TRIAC == SENSOR_78_TYPE)
		bcf SENSOR_78_TRIS, SENSOR_78_PIN	
		; Set tristate for zero-crossing port, too
		bsf SENSOR_78_ZC_PORT, SENSOR_78_ZC_PIN	

		movlw 0x20
		movwf SENSOR_78_PWM_VOLUME
		clrf SENSOR_78_ROLLING_TIMER_LOW
	#endif
#endif
; SENSOR_79
#ifdef SENSOR_79_PRESENT
	#if (SENSOR_ID_GENERIC_DIGITAL_IN == SENSOR_79_TYPE)
		bsf SENSOR_79_TRIS, SENSOR_79_PIN	
	#endif
	#if (SENSOR_ID_GENERIC_DIGITAL_OUT == SENSOR_79_TYPE)
		bcf SENSOR_79_TRIS, SENSOR_79_PIN	
	#endif
	#if (SENSOR_ID_PWM_LED == SENSOR_79_TYPE)
		bcf SENSOR_79_TRIS, SENSOR_79_PIN	

		; Stay in bank 1
		movlw 0x80
		movwf SENSOR_79_PWM_VOLUME
		movlw 0x80
		movwf SENSOR_79_PWM_TARGET
		movlw 0x01
		movwf SENSOR_79_PWM_SPEED

		clrf SENSOR_79_ROLLING_TIMER_LOW
	#endif

	#if (SENSOR_ID_TRIAC == SENSOR_79_TYPE)
		bcf SENSOR_79_TRIS, SENSOR_79_PIN	
		; Set tristate for zero-crossing port, too
		bsf SENSOR_79_ZC_PORT, SENSOR_79_ZC_PIN	

		movlw 0x20
		movwf SENSOR_79_PWM_VOLUME
		clrf SENSOR_79_ROLLING_TIMER_LOW
	#endif
#endif
; SENSOR_80
#ifdef SENSOR_80_PRESENT
	#if (SENSOR_ID_GENERIC_DIGITAL_IN == SENSOR_80_TYPE)
		bsf SENSOR_80_TRIS, SENSOR_80_PIN	
	#endif
	#if (SENSOR_ID_GENERIC_DIGITAL_OUT == SENSOR_80_TYPE)
		bcf SENSOR_80_TRIS, SENSOR_80_PIN	
	#endif
	#if (SENSOR_ID_PWM_LED == SENSOR_80_TYPE)
		bcf SENSOR_80_TRIS, SENSOR_80_PIN	

		; Stay in bank 1
		movlw 0x80
		movwf SENSOR_80_PWM_VOLUME
		movlw 0x80
		movwf SENSOR_80_PWM_TARGET
		movlw 0x01
		movwf SENSOR_80_PWM_SPEED

		clrf SENSOR_80_ROLLING_TIMER_LOW
	#endif

	#if (SENSOR_ID_TRIAC == SENSOR_80_TYPE)
		bcf SENSOR_80_TRIS, SENSOR_80_PIN	
		; Set tristate for zero-crossing port, too
		bsf SENSOR_80_ZC_PORT, SENSOR_80_ZC_PIN	

		movlw 0x20
		movwf SENSOR_80_PWM_VOLUME
		clrf SENSOR_80_ROLLING_TIMER_LOW
	#endif
#endif
; SENSOR_81
#ifdef SENSOR_81_PRESENT
	#if (SENSOR_ID_GENERIC_DIGITAL_IN == SENSOR_81_TYPE)
		bsf SENSOR_81_TRIS, SENSOR_81_PIN	
	#endif
	#if (SENSOR_ID_GENERIC_DIGITAL_OUT == SENSOR_81_TYPE)
		bcf SENSOR_81_TRIS, SENSOR_81_PIN	
	#endif
	#if (SENSOR_ID_PWM_LED == SENSOR_81_TYPE)
		bcf SENSOR_81_TRIS, SENSOR_81_PIN	

		; Stay in bank 1
		movlw 0x80
		movwf SENSOR_81_PWM_VOLUME
		movlw 0x80
		movwf SENSOR_81_PWM_TARGET
		movlw 0x01
		movwf SENSOR_81_PWM_SPEED

		clrf SENSOR_81_ROLLING_TIMER_LOW
	#endif

	#if (SENSOR_ID_TRIAC == SENSOR_81_TYPE)
		bcf SENSOR_81_TRIS, SENSOR_81_PIN	
		; Set tristate for zero-crossing port, too
		bsf SENSOR_81_ZC_PORT, SENSOR_81_ZC_PIN	

		movlw 0x20
		movwf SENSOR_81_PWM_VOLUME
		clrf SENSOR_81_ROLLING_TIMER_LOW
	#endif
#endif
; SENSOR_82
#ifdef SENSOR_82_PRESENT
	#if (SENSOR_ID_GENERIC_DIGITAL_IN == SENSOR_82_TYPE)
		bsf SENSOR_82_TRIS, SENSOR_82_PIN	
	#endif
	#if (SENSOR_ID_GENERIC_DIGITAL_OUT == SENSOR_82_TYPE)
		bcf SENSOR_82_TRIS, SENSOR_82_PIN	
	#endif
	#if (SENSOR_ID_PWM_LED == SENSOR_82_TYPE)
		bcf SENSOR_82_TRIS, SENSOR_82_PIN	

		; Stay in bank 1
		movlw 0x80
		movwf SENSOR_82_PWM_VOLUME
		movlw 0x80
		movwf SENSOR_82_PWM_TARGET
		movlw 0x01
		movwf SENSOR_82_PWM_SPEED

		clrf SENSOR_82_ROLLING_TIMER_LOW
	#endif

	#if (SENSOR_ID_TRIAC == SENSOR_82_TYPE)
		bcf SENSOR_82_TRIS, SENSOR_82_PIN	
		; Set tristate for zero-crossing port, too
		bsf SENSOR_82_ZC_PORT, SENSOR_82_ZC_PIN	

		movlw 0x20
		movwf SENSOR_82_PWM_VOLUME
		clrf SENSOR_82_ROLLING_TIMER_LOW
	#endif
#endif
; SENSOR_83
#ifdef SENSOR_83_PRESENT
	#if (SENSOR_ID_GENERIC_DIGITAL_IN == SENSOR_83_TYPE)
		bsf SENSOR_83_TRIS, SENSOR_83_PIN	
	#endif
	#if (SENSOR_ID_GENERIC_DIGITAL_OUT == SENSOR_83_TYPE)
		bcf SENSOR_83_TRIS, SENSOR_83_PIN	
	#endif
	#if (SENSOR_ID_PWM_LED == SENSOR_83_TYPE)
		bcf SENSOR_83_TRIS, SENSOR_83_PIN	

		; Stay in bank 1
		movlw 0x80
		movwf SENSOR_83_PWM_VOLUME
		movlw 0x80
		movwf SENSOR_83_PWM_TARGET
		movlw 0x01
		movwf SENSOR_83_PWM_SPEED

		clrf SENSOR_83_ROLLING_TIMER_LOW
	#endif

	#if (SENSOR_ID_TRIAC == SENSOR_83_TYPE)
		bcf SENSOR_83_TRIS, SENSOR_83_PIN	
		; Set tristate for zero-crossing port, too
		bsf SENSOR_83_ZC_PORT, SENSOR_83_ZC_PIN	

		movlw 0x20
		movwf SENSOR_83_PWM_VOLUME
		clrf SENSOR_83_ROLLING_TIMER_LOW
	#endif
#endif
; SENSOR_84
#ifdef SENSOR_84_PRESENT
	#if (SENSOR_ID_GENERIC_DIGITAL_IN == SENSOR_84_TYPE)
		bsf SENSOR_84_TRIS, SENSOR_84_PIN	
	#endif
	#if (SENSOR_ID_GENERIC_DIGITAL_OUT == SENSOR_84_TYPE)
		bcf SENSOR_84_TRIS, SENSOR_84_PIN	
	#endif
	#if (SENSOR_ID_PWM_LED == SENSOR_84_TYPE)
		bcf SENSOR_84_TRIS, SENSOR_84_PIN	

		; Stay in bank 1
		movlw 0x80
		movwf SENSOR_84_PWM_VOLUME
		movlw 0x80
		movwf SENSOR_84_PWM_TARGET
		movlw 0x01
		movwf SENSOR_84_PWM_SPEED

		clrf SENSOR_84_ROLLING_TIMER_LOW
	#endif

	#if (SENSOR_ID_TRIAC == SENSOR_84_TYPE)
		bcf SENSOR_84_TRIS, SENSOR_84_PIN	
		; Set tristate for zero-crossing port, too
		bsf SENSOR_84_ZC_PORT, SENSOR_84_ZC_PIN	

		movlw 0x20
		movwf SENSOR_84_PWM_VOLUME
		clrf SENSOR_84_ROLLING_TIMER_LOW
	#endif
#endif
; SENSOR_85
#ifdef SENSOR_85_PRESENT
	#if (SENSOR_ID_GENERIC_DIGITAL_IN == SENSOR_85_TYPE)
		bsf SENSOR_85_TRIS, SENSOR_85_PIN	
	#endif
	#if (SENSOR_ID_GENERIC_DIGITAL_OUT == SENSOR_85_TYPE)
		bcf SENSOR_85_TRIS, SENSOR_85_PIN	
	#endif
	#if (SENSOR_ID_PWM_LED == SENSOR_85_TYPE)
		bcf SENSOR_85_TRIS, SENSOR_85_PIN	

		; Stay in bank 1
		movlw 0x80
		movwf SENSOR_85_PWM_VOLUME
		movlw 0x80
		movwf SENSOR_85_PWM_TARGET
		movlw 0x01
		movwf SENSOR_85_PWM_SPEED

		clrf SENSOR_85_ROLLING_TIMER_LOW
	#endif

	#if (SENSOR_ID_TRIAC == SENSOR_85_TYPE)
		bcf SENSOR_85_TRIS, SENSOR_85_PIN	
		; Set tristate for zero-crossing port, too
		bsf SENSOR_85_ZC_PORT, SENSOR_85_ZC_PIN	

		movlw 0x20
		movwf SENSOR_85_PWM_VOLUME
		clrf SENSOR_85_ROLLING_TIMER_LOW
	#endif
#endif
; SENSOR_86
#ifdef SENSOR_86_PRESENT
	#if (SENSOR_ID_GENERIC_DIGITAL_IN == SENSOR_86_TYPE)
		bsf SENSOR_86_TRIS, SENSOR_86_PIN	
	#endif
	#if (SENSOR_ID_GENERIC_DIGITAL_OUT == SENSOR_86_TYPE)
		bcf SENSOR_86_TRIS, SENSOR_86_PIN	
	#endif
	#if (SENSOR_ID_PWM_LED == SENSOR_86_TYPE)
		bcf SENSOR_86_TRIS, SENSOR_86_PIN	

		; Stay in bank 1
		movlw 0x80
		movwf SENSOR_86_PWM_VOLUME
		movlw 0x80
		movwf SENSOR_86_PWM_TARGET
		movlw 0x01
		movwf SENSOR_86_PWM_SPEED

		clrf SENSOR_86_ROLLING_TIMER_LOW
	#endif

	#if (SENSOR_ID_TRIAC == SENSOR_86_TYPE)
		bcf SENSOR_86_TRIS, SENSOR_86_PIN	
		; Set tristate for zero-crossing port, too
		bsf SENSOR_86_ZC_PORT, SENSOR_86_ZC_PIN	

		movlw 0x20
		movwf SENSOR_86_PWM_VOLUME
		clrf SENSOR_86_ROLLING_TIMER_LOW
	#endif
#endif
; SENSOR_87
#ifdef SENSOR_87_PRESENT
	#if (SENSOR_ID_GENERIC_DIGITAL_IN == SENSOR_87_TYPE)
		bsf SENSOR_87_TRIS, SENSOR_87_PIN	
	#endif
	#if (SENSOR_ID_GENERIC_DIGITAL_OUT == SENSOR_87_TYPE)
		bcf SENSOR_87_TRIS, SENSOR_87_PIN	
	#endif
	#if (SENSOR_ID_PWM_LED == SENSOR_87_TYPE)
		bcf SENSOR_87_TRIS, SENSOR_87_PIN	

		; Stay in bank 1
		movlw 0x80
		movwf SENSOR_87_PWM_VOLUME
		movlw 0x80
		movwf SENSOR_87_PWM_TARGET
		movlw 0x01
		movwf SENSOR_87_PWM_SPEED

		clrf SENSOR_87_ROLLING_TIMER_LOW
	#endif

	#if (SENSOR_ID_TRIAC == SENSOR_87_TYPE)
		bcf SENSOR_87_TRIS, SENSOR_87_PIN	
		; Set tristate for zero-crossing port, too
		bsf SENSOR_87_ZC_PORT, SENSOR_87_ZC_PIN	

		movlw 0x20
		movwf SENSOR_87_PWM_VOLUME
		clrf SENSOR_87_ROLLING_TIMER_LOW
	#endif
#endif
; SENSOR_88
#ifdef SENSOR_88_PRESENT
	#if (SENSOR_ID_GENERIC_DIGITAL_IN == SENSOR_88_TYPE)
		bsf SENSOR_88_TRIS, SENSOR_88_PIN	
	#endif
	#if (SENSOR_ID_GENERIC_DIGITAL_OUT == SENSOR_88_TYPE)
		bcf SENSOR_88_TRIS, SENSOR_88_PIN	
	#endif
	#if (SENSOR_ID_PWM_LED == SENSOR_88_TYPE)
		bcf SENSOR_88_TRIS, SENSOR_88_PIN	

		; Stay in bank 1
		movlw 0x80
		movwf SENSOR_88_PWM_VOLUME
		movlw 0x80
		movwf SENSOR_88_PWM_TARGET
		movlw 0x01
		movwf SENSOR_88_PWM_SPEED

		clrf SENSOR_88_ROLLING_TIMER_LOW
	#endif

	#if (SENSOR_ID_TRIAC == SENSOR_88_TYPE)
		bcf SENSOR_88_TRIS, SENSOR_88_PIN	
		; Set tristate for zero-crossing port, too
		bsf SENSOR_88_ZC_PORT, SENSOR_88_ZC_PIN	

		movlw 0x20
		movwf SENSOR_88_PWM_VOLUME
		clrf SENSOR_88_ROLLING_TIMER_LOW
	#endif
#endif
; SENSOR_89
#ifdef SENSOR_89_PRESENT
	#if (SENSOR_ID_GENERIC_DIGITAL_IN == SENSOR_89_TYPE)
		bsf SENSOR_89_TRIS, SENSOR_89_PIN	
	#endif
	#if (SENSOR_ID_GENERIC_DIGITAL_OUT == SENSOR_89_TYPE)
		bcf SENSOR_89_TRIS, SENSOR_89_PIN	
	#endif
	#if (SENSOR_ID_PWM_LED == SENSOR_89_TYPE)
		bcf SENSOR_89_TRIS, SENSOR_89_PIN	

		; Stay in bank 1
		movlw 0x80
		movwf SENSOR_89_PWM_VOLUME
		movlw 0x80
		movwf SENSOR_89_PWM_TARGET
		movlw 0x01
		movwf SENSOR_89_PWM_SPEED

		clrf SENSOR_89_ROLLING_TIMER_LOW
	#endif

	#if (SENSOR_ID_TRIAC == SENSOR_89_TYPE)
		bcf SENSOR_89_TRIS, SENSOR_89_PIN	
		; Set tristate for zero-crossing port, too
		bsf SENSOR_89_ZC_PORT, SENSOR_89_ZC_PIN	

		movlw 0x20
		movwf SENSOR_89_PWM_VOLUME
		clrf SENSOR_89_ROLLING_TIMER_LOW
	#endif
#endif
; SENSOR_90
#ifdef SENSOR_90_PRESENT
	#if (SENSOR_ID_GENERIC_DIGITAL_IN == SENSOR_90_TYPE)
		bsf SENSOR_90_TRIS, SENSOR_90_PIN	
	#endif
	#if (SENSOR_ID_GENERIC_DIGITAL_OUT == SENSOR_90_TYPE)
		bcf SENSOR_90_TRIS, SENSOR_90_PIN	
	#endif
	#if (SENSOR_ID_PWM_LED == SENSOR_90_TYPE)
		bcf SENSOR_90_TRIS, SENSOR_90_PIN	

		; Stay in bank 1
		movlw 0x80
		movwf SENSOR_90_PWM_VOLUME
		movlw 0x80
		movwf SENSOR_90_PWM_TARGET
		movlw 0x01
		movwf SENSOR_90_PWM_SPEED

		clrf SENSOR_90_ROLLING_TIMER_LOW
	#endif

	#if (SENSOR_ID_TRIAC == SENSOR_90_TYPE)
		bcf SENSOR_90_TRIS, SENSOR_90_PIN	
		; Set tristate for zero-crossing port, too
		bsf SENSOR_90_ZC_PORT, SENSOR_90_ZC_PIN	

		movlw 0x20
		movwf SENSOR_90_PWM_VOLUME
		clrf SENSOR_90_ROLLING_TIMER_LOW
	#endif
#endif
; SENSOR_91
#ifdef SENSOR_91_PRESENT
	#if (SENSOR_ID_GENERIC_DIGITAL_IN == SENSOR_91_TYPE)
		bsf SENSOR_91_TRIS, SENSOR_91_PIN	
	#endif
	#if (SENSOR_ID_GENERIC_DIGITAL_OUT == SENSOR_91_TYPE)
		bcf SENSOR_91_TRIS, SENSOR_91_PIN	
	#endif
	#if (SENSOR_ID_PWM_LED == SENSOR_91_TYPE)
		bcf SENSOR_91_TRIS, SENSOR_91_PIN	

		; Stay in bank 1
		movlw 0x80
		movwf SENSOR_91_PWM_VOLUME
		movlw 0x80
		movwf SENSOR_91_PWM_TARGET
		movlw 0x01
		movwf SENSOR_91_PWM_SPEED

		clrf SENSOR_91_ROLLING_TIMER_LOW
	#endif

	#if (SENSOR_ID_TRIAC == SENSOR_91_TYPE)
		bcf SENSOR_91_TRIS, SENSOR_91_PIN	
		; Set tristate for zero-crossing port, too
		bsf SENSOR_91_ZC_PORT, SENSOR_91_ZC_PIN	

		movlw 0x20
		movwf SENSOR_91_PWM_VOLUME
		clrf SENSOR_91_ROLLING_TIMER_LOW
	#endif
#endif
; SENSOR_92
#ifdef SENSOR_92_PRESENT
	#if (SENSOR_ID_GENERIC_DIGITAL_IN == SENSOR_92_TYPE)
		bsf SENSOR_92_TRIS, SENSOR_92_PIN	
	#endif
	#if (SENSOR_ID_GENERIC_DIGITAL_OUT == SENSOR_92_TYPE)
		bcf SENSOR_92_TRIS, SENSOR_92_PIN	
	#endif
	#if (SENSOR_ID_PWM_LED == SENSOR_92_TYPE)
		bcf SENSOR_92_TRIS, SENSOR_92_PIN	

		; Stay in bank 1
		movlw 0x80
		movwf SENSOR_92_PWM_VOLUME
		movlw 0x80
		movwf SENSOR_92_PWM_TARGET
		movlw 0x01
		movwf SENSOR_92_PWM_SPEED

		clrf SENSOR_92_ROLLING_TIMER_LOW
	#endif

	#if (SENSOR_ID_TRIAC == SENSOR_92_TYPE)
		bcf SENSOR_92_TRIS, SENSOR_92_PIN	
		; Set tristate for zero-crossing port, too
		bsf SENSOR_92_ZC_PORT, SENSOR_92_ZC_PIN	

		movlw 0x20
		movwf SENSOR_92_PWM_VOLUME
		clrf SENSOR_92_ROLLING_TIMER_LOW
	#endif
#endif
; SENSOR_93
#ifdef SENSOR_93_PRESENT
	#if (SENSOR_ID_GENERIC_DIGITAL_IN == SENSOR_93_TYPE)
		bsf SENSOR_93_TRIS, SENSOR_93_PIN	
	#endif
	#if (SENSOR_ID_GENERIC_DIGITAL_OUT == SENSOR_93_TYPE)
		bcf SENSOR_93_TRIS, SENSOR_93_PIN	
	#endif
	#if (SENSOR_ID_PWM_LED == SENSOR_93_TYPE)
		bcf SENSOR_93_TRIS, SENSOR_93_PIN	

		; Stay in bank 1
		movlw 0x80
		movwf SENSOR_93_PWM_VOLUME
		movlw 0x80
		movwf SENSOR_93_PWM_TARGET
		movlw 0x01
		movwf SENSOR_93_PWM_SPEED

		clrf SENSOR_93_ROLLING_TIMER_LOW
	#endif

	#if (SENSOR_ID_TRIAC == SENSOR_93_TYPE)
		bcf SENSOR_93_TRIS, SENSOR_93_PIN	
		; Set tristate for zero-crossing port, too
		bsf SENSOR_93_ZC_PORT, SENSOR_93_ZC_PIN	

		movlw 0x20
		movwf SENSOR_93_PWM_VOLUME
		clrf SENSOR_93_ROLLING_TIMER_LOW
	#endif
#endif
; SENSOR_94
#ifdef SENSOR_94_PRESENT
	#if (SENSOR_ID_GENERIC_DIGITAL_IN == SENSOR_94_TYPE)
		bsf SENSOR_94_TRIS, SENSOR_94_PIN	
	#endif
	#if (SENSOR_ID_GENERIC_DIGITAL_OUT == SENSOR_94_TYPE)
		bcf SENSOR_94_TRIS, SENSOR_94_PIN	
	#endif
	#if (SENSOR_ID_PWM_LED == SENSOR_94_TYPE)
		bcf SENSOR_94_TRIS, SENSOR_94_PIN	

		; Stay in bank 1
		movlw 0x80
		movwf SENSOR_94_PWM_VOLUME
		movlw 0x80
		movwf SENSOR_94_PWM_TARGET
		movlw 0x01
		movwf SENSOR_94_PWM_SPEED

		clrf SENSOR_94_ROLLING_TIMER_LOW
	#endif

	#if (SENSOR_ID_TRIAC == SENSOR_94_TYPE)
		bcf SENSOR_94_TRIS, SENSOR_94_PIN	
		; Set tristate for zero-crossing port, too
		bsf SENSOR_94_ZC_PORT, SENSOR_94_ZC_PIN	

		movlw 0x20
		movwf SENSOR_94_PWM_VOLUME
		clrf SENSOR_94_ROLLING_TIMER_LOW
	#endif
#endif
; SENSOR_95
#ifdef SENSOR_95_PRESENT
	#if (SENSOR_ID_GENERIC_DIGITAL_IN == SENSOR_95_TYPE)
		bsf SENSOR_95_TRIS, SENSOR_95_PIN	
	#endif
	#if (SENSOR_ID_GENERIC_DIGITAL_OUT == SENSOR_95_TYPE)
		bcf SENSOR_95_TRIS, SENSOR_95_PIN	
	#endif
	#if (SENSOR_ID_PWM_LED == SENSOR_95_TYPE)
		bcf SENSOR_95_TRIS, SENSOR_95_PIN	

		; Stay in bank 1
		movlw 0x80
		movwf SENSOR_95_PWM_VOLUME
		movlw 0x80
		movwf SENSOR_95_PWM_TARGET
		movlw 0x01
		movwf SENSOR_95_PWM_SPEED

		clrf SENSOR_95_ROLLING_TIMER_LOW
	#endif

	#if (SENSOR_ID_TRIAC == SENSOR_95_TYPE)
		bcf SENSOR_95_TRIS, SENSOR_95_PIN	
		; Set tristate for zero-crossing port, too
		bsf SENSOR_95_ZC_PORT, SENSOR_95_ZC_PIN	

		movlw 0x20
		movwf SENSOR_95_PWM_VOLUME
		clrf SENSOR_95_ROLLING_TIMER_LOW
	#endif
#endif
; SENSOR_96
#ifdef SENSOR_96_PRESENT
	#if (SENSOR_ID_GENERIC_DIGITAL_IN == SENSOR_96_TYPE)
		bsf SENSOR_96_TRIS, SENSOR_96_PIN	
	#endif
	#if (SENSOR_ID_GENERIC_DIGITAL_OUT == SENSOR_96_TYPE)
		bcf SENSOR_96_TRIS, SENSOR_96_PIN	
	#endif
	#if (SENSOR_ID_PWM_LED == SENSOR_96_TYPE)
		bcf SENSOR_96_TRIS, SENSOR_96_PIN	

		; Stay in bank 1
		movlw 0x80
		movwf SENSOR_96_PWM_VOLUME
		movlw 0x80
		movwf SENSOR_96_PWM_TARGET
		movlw 0x01
		movwf SENSOR_96_PWM_SPEED

		clrf SENSOR_96_ROLLING_TIMER_LOW
	#endif

	#if (SENSOR_ID_TRIAC == SENSOR_96_TYPE)
		bcf SENSOR_96_TRIS, SENSOR_96_PIN	
		; Set tristate for zero-crossing port, too
		bsf SENSOR_96_ZC_PORT, SENSOR_96_ZC_PIN	

		movlw 0x20
		movwf SENSOR_96_PWM_VOLUME
		clrf SENSOR_96_ROLLING_TIMER_LOW
	#endif
#endif
; SENSOR_97
#ifdef SENSOR_97_PRESENT
	#if (SENSOR_ID_GENERIC_DIGITAL_IN == SENSOR_97_TYPE)
		bsf SENSOR_97_TRIS, SENSOR_97_PIN	
	#endif
	#if (SENSOR_ID_GENERIC_DIGITAL_OUT == SENSOR_97_TYPE)
		bcf SENSOR_97_TRIS, SENSOR_97_PIN	
	#endif
	#if (SENSOR_ID_PWM_LED == SENSOR_97_TYPE)
		bcf SENSOR_97_TRIS, SENSOR_97_PIN	

		; Stay in bank 1
		movlw 0x80
		movwf SENSOR_97_PWM_VOLUME
		movlw 0x80
		movwf SENSOR_97_PWM_TARGET
		movlw 0x01
		movwf SENSOR_97_PWM_SPEED

		clrf SENSOR_97_ROLLING_TIMER_LOW
	#endif

	#if (SENSOR_ID_TRIAC == SENSOR_97_TYPE)
		bcf SENSOR_97_TRIS, SENSOR_97_PIN	
		; Set tristate for zero-crossing port, too
		bsf SENSOR_97_ZC_PORT, SENSOR_97_ZC_PIN	

		movlw 0x20
		movwf SENSOR_97_PWM_VOLUME
		clrf SENSOR_97_ROLLING_TIMER_LOW
	#endif
#endif
; SENSOR_98
#ifdef SENSOR_98_PRESENT
	#if (SENSOR_ID_GENERIC_DIGITAL_IN == SENSOR_98_TYPE)
		bsf SENSOR_98_TRIS, SENSOR_98_PIN	
	#endif
	#if (SENSOR_ID_GENERIC_DIGITAL_OUT == SENSOR_98_TYPE)
		bcf SENSOR_98_TRIS, SENSOR_98_PIN	
	#endif
	#if (SENSOR_ID_PWM_LED == SENSOR_98_TYPE)
		bcf SENSOR_98_TRIS, SENSOR_98_PIN	

		; Stay in bank 1
		movlw 0x80
		movwf SENSOR_98_PWM_VOLUME
		movlw 0x80
		movwf SENSOR_98_PWM_TARGET
		movlw 0x01
		movwf SENSOR_98_PWM_SPEED

		clrf SENSOR_98_ROLLING_TIMER_LOW
	#endif

	#if (SENSOR_ID_TRIAC == SENSOR_98_TYPE)
		bcf SENSOR_98_TRIS, SENSOR_98_PIN	
		; Set tristate for zero-crossing port, too
		bsf SENSOR_98_ZC_PORT, SENSOR_98_ZC_PIN	

		movlw 0x20
		movwf SENSOR_98_PWM_VOLUME
		clrf SENSOR_98_ROLLING_TIMER_LOW
	#endif
#endif
; SENSOR_99
#ifdef SENSOR_99_PRESENT
	#if (SENSOR_ID_GENERIC_DIGITAL_IN == SENSOR_99_TYPE)
		bsf SENSOR_99_TRIS, SENSOR_99_PIN	
	#endif
	#if (SENSOR_ID_GENERIC_DIGITAL_OUT == SENSOR_99_TYPE)
		bcf SENSOR_99_TRIS, SENSOR_99_PIN	
	#endif
	#if (SENSOR_ID_PWM_LED == SENSOR_99_TYPE)
		bcf SENSOR_99_TRIS, SENSOR_99_PIN	

		; Stay in bank 1
		movlw 0x80
		movwf SENSOR_99_PWM_VOLUME
		movlw 0x80
		movwf SENSOR_99_PWM_TARGET
		movlw 0x01
		movwf SENSOR_99_PWM_SPEED

		clrf SENSOR_99_ROLLING_TIMER_LOW
	#endif

	#if (SENSOR_ID_TRIAC == SENSOR_99_TYPE)
		bcf SENSOR_99_TRIS, SENSOR_99_PIN	
		; Set tristate for zero-crossing port, too
		bsf SENSOR_99_ZC_PORT, SENSOR_99_ZC_PIN	

		movlw 0x20
		movwf SENSOR_99_PWM_VOLUME
		clrf SENSOR_99_ROLLING_TIMER_LOW
	#endif
#endif
    bcf STATUS, RP0 ; bank 0
    bcf STATUS, RP1 ; bank 0

	return

	end